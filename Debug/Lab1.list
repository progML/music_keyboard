
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  08007960  08007960  00017960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800846c  0800846c  000203d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800846c  0800846c  0001846c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008474  08008474  000203d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d8  20000000  0800847c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000203d8  2**0
                  CONTENTS
 10 .bss          00000768  200003d8  200003d8  000203d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b40  20000b40  000203d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d96  00000000  00000000  00020408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003423  00000000  00000000  0003919e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  0003c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023587  00000000  00000000  0003d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cee  00000000  00000000  00060d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cea8e  00000000  00000000  00078a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147503  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 000010f0  00000000  00000000  00147558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ef8  00000000  00000000  00148648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003d8 	.word	0x200003d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007948 	.word	0x08007948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003dc 	.word	0x200003dc
 80001cc:	08007948 	.word	0x08007948

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b35      	ldr	r3, [pc, #212]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a34      	ldr	r2, [pc, #208]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b32      	ldr	r3, [pc, #200]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2d      	ldr	r2, [pc, #180]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a26      	ldr	r2, [pc, #152]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_GPIO_Init+0xf0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_GPIO_Init+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000620:	4812      	ldr	r0, [pc, #72]	; (800066c <MX_GPIO_Init+0xf4>)
 8000622:	f001 ffd1 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	480d      	ldr	r0, [pc, #52]	; (8000670 <MX_GPIO_Init+0xf8>)
 800063c:	f001 fe10 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000640:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_GPIO_Init+0xf4>)
 800065a:	f001 fe01 	bl	8002260 <HAL_GPIO_Init>

}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	; 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40020c00 	.word	0x40020c00
 8000670:	40020800 	.word	0x40020800

08000674 <getButtonState>:
        setOffYellowDiode();
        delay(500);
    }
}

int getButtonState() {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8000678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <getButtonState+0x14>)
 800067e:	f001 ff8b 	bl	8002598 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
}
 8000684:	4618      	mov	r0, r3
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020800 	.word	0x40020800

0800068c <getCurrentTime>:

long getCurrentTime(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000690:	f001 fc04 	bl	8001e9c <HAL_GetTick>
 8000694:	4603      	mov	r3, r0
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C1_Init+0x50>)
 80006da:	f001 ff8f 	bl	80025fc <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 fe7a 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200008e0 	.word	0x200008e0
 80006f0:	40005400 	.word	0x40005400
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <HAL_I2C_MspInit+0xa4>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d13c      	bne.n	8000794 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <HAL_I2C_MspInit+0xa8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <HAL_I2C_MspInit+0xa8>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <HAL_I2C_MspInit+0xa8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000736:	f44f 7340 	mov.w	r3, #768	; 0x300
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073c:	2312      	movs	r3, #18
 800073e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000748:	2304      	movs	r3, #4
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4814      	ldr	r0, [pc, #80]	; (80007a4 <HAL_I2C_MspInit+0xac>)
 8000754:	f001 fd84 	bl	8002260 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_I2C_MspInit+0xa8>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <HAL_I2C_MspInit+0xa8>)
 8000762:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <HAL_I2C_MspInit+0xa8>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	201f      	movs	r0, #31
 800077a:	f001 fc9a 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800077e:	201f      	movs	r0, #31
 8000780:	f001 fcb3 	bl	80020ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2020      	movs	r0, #32
 800078a:	f001 fc92 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800078e:	2020      	movs	r0, #32
 8000790:	f001 fcab 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40005400 	.word	0x40005400
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400

080007a8 <ks_continue>:

int ks_state = 0;
uint8_t ks_result = 0;
uint8_t ks_current_row = 0;

HAL_StatusTypeDef ks_continue(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0c6      	sub	sp, #280	; 0x118
 80007ac:	af04      	add	r7, sp, #16
	static uint8_t buf[4];
	uint8_t Nkey = 0x00;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t kbd_in;

	switch (ks_state) {
 80007b4:	4b82      	ldr	r3, [pc, #520]	; (80009c0 <ks_continue+0x218>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	f200 80fa 	bhi.w	80009b2 <ks_continue+0x20a>
 80007be:	a201      	add	r2, pc, #4	; (adr r2, 80007c4 <ks_continue+0x1c>)
 80007c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c4:	080007d9 	.word	0x080007d9
 80007c8:	08000843 	.word	0x08000843
 80007cc:	0800089b 	.word	0x0800089b
 80007d0:	080008f5 	.word	0x080008f5
 80007d4:	08000949 	.word	0x08000949
	case 0:
		buf[0] = 0x70;
 80007d8:	4b7a      	ldr	r3, [pc, #488]	; (80009c4 <ks_continue+0x21c>)
 80007da:	2270      	movs	r2, #112	; 0x70
 80007dc:	701a      	strb	r2, [r3, #0]
		buf[1] = 0;
 80007de:	4b79      	ldr	r3, [pc, #484]	; (80009c4 <ks_continue+0x21c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	705a      	strb	r2, [r3, #1]
		buf[2] = 0;
 80007e4:	4b77      	ldr	r3, [pc, #476]	; (80009c4 <ks_continue+0x21c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	709a      	strb	r2, [r3, #2]
		buf[3] = 0;
 80007ea:	4b76      	ldr	r3, [pc, #472]	; (80009c4 <ks_continue+0x21c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	70da      	strb	r2, [r3, #3]
		ks_state = 0;
 80007f0:	4b73      	ldr	r3, [pc, #460]	; (80009c0 <ks_continue+0x218>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Write_Register(KBRD_WR_ADDR, CONFIG, buf))
 80007f6:	4a73      	ldr	r2, [pc, #460]	; (80009c4 <ks_continue+0x21c>)
 80007f8:	2103      	movs	r1, #3
 80007fa:	20e2      	movs	r0, #226	; 0xe2
 80007fc:	f001 f80e 	bl	800181c <PCA9538_Write_Register>
 8000800:	4603      	mov	r3, r0
 8000802:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 8000806:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800080a:	2b00      	cmp	r3, #0
 800080c:	d014      	beq.n	8000838 <ks_continue+0x90>
 800080e:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000812:	4638      	mov	r0, r7
 8000814:	4a6c      	ldr	r2, [pc, #432]	; (80009c8 <ks_continue+0x220>)
 8000816:	9202      	str	r2, [sp, #8]
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	231f      	movs	r3, #31
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <ks_continue+0x224>)
 8000820:	4a6b      	ldr	r2, [pc, #428]	; (80009d0 <ks_continue+0x228>)
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	f006 fc2d 	bl	8007084 <sniprintf>
 800082a:	463b      	mov	r3, r7
 800082c:	4618      	mov	r0, r3
 800082e:	f001 f82b 	bl	8001888 <UART_Transmit>
 8000832:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000836:	e0bd      	b.n	80009b4 <ks_continue+0x20c>
		;
		ks_state = 1;
 8000838:	4b61      	ldr	r3, [pc, #388]	; (80009c0 <ks_continue+0x218>)
 800083a:	2201      	movs	r2, #1
 800083c:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e0b8      	b.n	80009b4 <ks_continue+0x20c>
	case 1:
		buf[0] = 0;
 8000842:	4b60      	ldr	r3, [pc, #384]	; (80009c4 <ks_continue+0x21c>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
		ks_state = 0;
 8000848:	4b5d      	ldr	r3, [pc, #372]	; (80009c0 <ks_continue+0x218>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Write_Register(KBRD_WR_ADDR, OUTPUT_PORT, buf))
 800084e:	4a5d      	ldr	r2, [pc, #372]	; (80009c4 <ks_continue+0x21c>)
 8000850:	2101      	movs	r1, #1
 8000852:	20e2      	movs	r0, #226	; 0xe2
 8000854:	f000 ffe2 	bl	800181c <PCA9538_Write_Register>
 8000858:	4603      	mov	r3, r0
 800085a:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 800085e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000862:	2b00      	cmp	r3, #0
 8000864:	d014      	beq.n	8000890 <ks_continue+0xe8>
 8000866:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800086a:	4638      	mov	r0, r7
 800086c:	4a59      	ldr	r2, [pc, #356]	; (80009d4 <ks_continue+0x22c>)
 800086e:	9202      	str	r2, [sp, #8]
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	2326      	movs	r3, #38	; 0x26
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	4b55      	ldr	r3, [pc, #340]	; (80009cc <ks_continue+0x224>)
 8000878:	4a55      	ldr	r2, [pc, #340]	; (80009d0 <ks_continue+0x228>)
 800087a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087e:	f006 fc01 	bl	8007084 <sniprintf>
 8000882:	463b      	mov	r3, r7
 8000884:	4618      	mov	r0, r3
 8000886:	f000 ffff 	bl	8001888 <UART_Transmit>
 800088a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800088e:	e091      	b.n	80009b4 <ks_continue+0x20c>
		;
		ks_state = 2;
 8000890:	4b4b      	ldr	r3, [pc, #300]	; (80009c0 <ks_continue+0x218>)
 8000892:	2202      	movs	r2, #2
 8000894:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	e08c      	b.n	80009b4 <ks_continue+0x20c>
	case 2:
		buf[0] = ks_current_row;
 800089a:	4b4f      	ldr	r3, [pc, #316]	; (80009d8 <ks_continue+0x230>)
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <ks_continue+0x21c>)
 80008a0:	701a      	strb	r2, [r3, #0]
		ks_state = 0;
 80008a2:	4b47      	ldr	r3, [pc, #284]	; (80009c0 <ks_continue+0x218>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Write_Register(KBRD_WR_ADDR, OUTPUT_PORT, buf))
 80008a8:	4a46      	ldr	r2, [pc, #280]	; (80009c4 <ks_continue+0x21c>)
 80008aa:	2101      	movs	r1, #1
 80008ac:	20e2      	movs	r0, #226	; 0xe2
 80008ae:	f000 ffb5 	bl	800181c <PCA9538_Write_Register>
 80008b2:	4603      	mov	r3, r0
 80008b4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 80008b8:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d014      	beq.n	80008ea <ks_continue+0x142>
 80008c0:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80008c4:	4638      	mov	r0, r7
 80008c6:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <ks_continue+0x22c>)
 80008c8:	9202      	str	r2, [sp, #8]
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	232d      	movs	r3, #45	; 0x2d
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <ks_continue+0x224>)
 80008d2:	4a3f      	ldr	r2, [pc, #252]	; (80009d0 <ks_continue+0x228>)
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	f006 fbd4 	bl	8007084 <sniprintf>
 80008dc:	463b      	mov	r3, r7
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 ffd2 	bl	8001888 <UART_Transmit>
 80008e4:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80008e8:	e064      	b.n	80009b4 <ks_continue+0x20c>
		;
		ks_state = 3;
 80008ea:	4b35      	ldr	r3, [pc, #212]	; (80009c0 <ks_continue+0x218>)
 80008ec:	2203      	movs	r2, #3
 80008ee:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80008f0:	2300      	movs	r3, #0
 80008f2:	e05f      	b.n	80009b4 <ks_continue+0x20c>
	case 3:
		buf[0] = 0;
 80008f4:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <ks_continue+0x21c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
		ks_state = 0;
 80008fa:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <ks_continue+0x218>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Read_Inputs(KBRD_RD_ADDR, buf))
 8000900:	4930      	ldr	r1, [pc, #192]	; (80009c4 <ks_continue+0x21c>)
 8000902:	20e3      	movs	r0, #227	; 0xe3
 8000904:	f000 ffae 	bl	8001864 <PCA9538_Read_Inputs>
 8000908:	4603      	mov	r3, r0
 800090a:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 800090e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8000912:	2b00      	cmp	r3, #0
 8000914:	d014      	beq.n	8000940 <ks_continue+0x198>
 8000916:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800091a:	4638      	mov	r0, r7
 800091c:	4a2f      	ldr	r2, [pc, #188]	; (80009dc <ks_continue+0x234>)
 800091e:	9202      	str	r2, [sp, #8]
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	2334      	movs	r3, #52	; 0x34
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	4b29      	ldr	r3, [pc, #164]	; (80009cc <ks_continue+0x224>)
 8000928:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <ks_continue+0x228>)
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	f006 fba9 	bl	8007084 <sniprintf>
 8000932:	463b      	mov	r3, r7
 8000934:	4618      	mov	r0, r3
 8000936:	f000 ffa7 	bl	8001888 <UART_Transmit>
 800093a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800093e:	e039      	b.n	80009b4 <ks_continue+0x20c>
		;
		ks_state = 4;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <ks_continue+0x218>)
 8000942:	2204      	movs	r2, #4
 8000944:	601a      	str	r2, [r3, #0]
		break;
 8000946:	e034      	b.n	80009b2 <ks_continue+0x20a>
	case 4:
		ks_state = 0;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <ks_continue+0x218>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
		kbd_in = buf[0] & 0x70;
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <ks_continue+0x21c>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000956:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		Nkey = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (!(kbd_in & 0x10))
 8000960:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	2b00      	cmp	r3, #0
 800096a:	d105      	bne.n	8000978 <ks_continue+0x1d0>
			Nkey |= 0x04;
 800096c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (!(kbd_in & 0x20))
 8000978:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800097c:	f003 0320 	and.w	r3, r3, #32
 8000980:	2b00      	cmp	r3, #0
 8000982:	d105      	bne.n	8000990 <ks_continue+0x1e8>
			Nkey |= 0x02;
 8000984:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (!(kbd_in & 0x40))
 8000990:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000998:	2b00      	cmp	r3, #0
 800099a:	d105      	bne.n	80009a8 <ks_continue+0x200>
			Nkey |= 0x01;
 800099c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		ks_result = Nkey;
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <ks_continue+0x238>)
 80009aa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80009ae:	7013      	strb	r3, [r2, #0]
		break;
 80009b0:	bf00      	nop
	}
	return HAL_OK;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200003f4 	.word	0x200003f4
 80009c4:	200003fc 	.word	0x200003fc
 80009c8:	08007998 	.word	0x08007998
 80009cc:	08007960 	.word	0x08007960
 80009d0:	08007974 	.word	0x08007974
 80009d4:	080079cc 	.word	0x080079cc
 80009d8:	200003f9 	.word	0x200003f9
 80009dc:	08007a04 	.word	0x08007a04
 80009e0:	200003f8 	.word	0x200003f8

080009e4 <writeScreenMessage>:

//LAB4

#define FONT Font_7x10 // MB CHANGE

void writeScreenMessage(char *message) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    oled_WriteString(message, FONT, White);
 80009ec:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <writeScreenMessage+0x20>)
 80009ee:	2301      	movs	r3, #1
 80009f0:	ca06      	ldmia	r2, {r1, r2}
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f000 feb0 	bl	8001758 <oled_WriteString>
    oled_UpdateScreen();
 80009f8:	f000 fd9e 	bl	8001538 <oled_UpdateScreen>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000

08000a08 <writeScreenChar>:

void writeScreenChar(char ch) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
    oled_WriteChar(ch, FONT, White);
 8000a12:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <writeScreenChar+0x24>)
 8000a14:	79f8      	ldrb	r0, [r7, #7]
 8000a16:	2301      	movs	r3, #1
 8000a18:	ca06      	ldmia	r2, {r1, r2}
 8000a1a:	f000 fe1d 	bl	8001658 <oled_WriteChar>
    oled_UpdateScreen();
 8000a1e:	f000 fd8b 	bl	8001538 <oled_UpdateScreen>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000000 	.word	0x20000000

08000a30 <resetScreen>:

void resetScreen() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
    oled_Fill(Black);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 fd5b 	bl	80014f0 <oled_Fill>
    oled_SetCursor(0, 0);
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f000 feb1 	bl	80017a4 <oled_SetCursor>
    oled_UpdateScreen();
 8000a42:	f000 fd79 	bl	8001538 <oled_UpdateScreen>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <writeScreenError>:

void writeScreenError() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    writeScreenMessage(errorMessage);
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <writeScreenError+0x14>)
 8000a52:	f7ff ffc7 	bl	80009e4 <writeScreenMessage>
    oled_UpdateScreen();
 8000a56:	f000 fd6f 	bl	8001538 <oled_UpdateScreen>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000048 	.word	0x20000048

08000a64 <writeScreenErrorAndReset>:

void writeScreenErrorAndReset() {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    writeScreenError();
 8000a68:	f7ff fff0 	bl	8000a4c <writeScreenError>
    resetCalc();
 8000a6c:	f000 fa52 	bl	8000f14 <resetCalc>
    oled_UpdateScreen();
 8000a70:	f000 fd62 	bl	8001538 <oled_UpdateScreen>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <nextOperation>:




void nextOperation(){
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
    curCalcsOperation++;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <nextOperation+0x30>)
 8000a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	3301      	adds	r3, #1
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <nextOperation+0x30>)
 8000a8c:	801a      	strh	r2, [r3, #0]
    if (curCalcsOperation > 3)
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <nextOperation+0x30>)
 8000a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	dd02      	ble.n	8000a9e <nextOperation+0x26>
        curCalcsOperation = 0;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <nextOperation+0x30>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	801a      	strh	r2, [r3, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	200004a8 	.word	0x200004a8

08000aac <checkNumbertoOverflow>:

short checkNumbertoOverflow(short fullNumber, short number) {
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	80fb      	strh	r3, [r7, #6]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	80bb      	strh	r3, [r7, #4]
    if ((fullNumber == 3276 && number >= 7) || fullNumber > 3276)
 8000abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac0:	f640 42cc 	movw	r2, #3276	; 0xccc
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d103      	bne.n	8000ad0 <checkNumbertoOverflow+0x24>
 8000ac8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	dc05      	bgt.n	8000adc <checkNumbertoOverflow+0x30>
 8000ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad4:	f640 42cc 	movw	r2, #3276	; 0xccc
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	dd02      	ble.n	8000ae2 <checkNumbertoOverflow+0x36>
        return -1;
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	e009      	b.n	8000af6 <checkNumbertoOverflow+0x4a>
    return fullNumber * 10 + number;
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b21b      	sxth	r3, r3
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <getNumber>:

short getNumber(char ch) {
 8000b02:	b480      	push	{r7}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
    short asciNum = ch;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	81fb      	strh	r3, [r7, #14]
    if (asciNum >= 48 && asciNum <= 57)
 8000b10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b14:	2b2f      	cmp	r3, #47	; 0x2f
 8000b16:	dd08      	ble.n	8000b2a <getNumber+0x28>
 8000b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b1c:	2b39      	cmp	r3, #57	; 0x39
 8000b1e:	dc04      	bgt.n	8000b2a <getNumber+0x28>
        return asciNum - '0';
 8000b20:	89fb      	ldrh	r3, [r7, #14]
 8000b22:	3b30      	subs	r3, #48	; 0x30
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	e001      	b.n	8000b2e <getNumber+0x2c>
    return -1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <getMathOperation>:

enum MathOperation getMathOperation(char ch) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
    switch (ch) {
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	3b2a      	subs	r3, #42	; 0x2a
 8000b4a:	2b13      	cmp	r3, #19
 8000b4c:	d834      	bhi.n	8000bb8 <getMathOperation+0x7c>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <getMathOperation+0x18>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000bad 	.word	0x08000bad
 8000b58:	08000ba5 	.word	0x08000ba5
 8000b5c:	08000bb9 	.word	0x08000bb9
 8000b60:	08000ba9 	.word	0x08000ba9
 8000b64:	08000bb9 	.word	0x08000bb9
 8000b68:	08000bb1 	.word	0x08000bb1
 8000b6c:	08000bb9 	.word	0x08000bb9
 8000b70:	08000bb9 	.word	0x08000bb9
 8000b74:	08000bb9 	.word	0x08000bb9
 8000b78:	08000bb9 	.word	0x08000bb9
 8000b7c:	08000bb9 	.word	0x08000bb9
 8000b80:	08000bb9 	.word	0x08000bb9
 8000b84:	08000bb9 	.word	0x08000bb9
 8000b88:	08000bb9 	.word	0x08000bb9
 8000b8c:	08000bb9 	.word	0x08000bb9
 8000b90:	08000bb9 	.word	0x08000bb9
 8000b94:	08000bb9 	.word	0x08000bb9
 8000b98:	08000bb9 	.word	0x08000bb9
 8000b9c:	08000bb9 	.word	0x08000bb9
 8000ba0:	08000bb5 	.word	0x08000bb5
        case '+':
            return ADDITION;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e008      	b.n	8000bba <getMathOperation+0x7e>
        case '-':
            return SUBTRACTION;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e006      	b.n	8000bba <getMathOperation+0x7e>
        case '*':
            return MULTIPLICATION;
 8000bac:	2302      	movs	r3, #2
 8000bae:	e004      	b.n	8000bba <getMathOperation+0x7e>
        case '/':
            return DIVISION;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e002      	b.n	8000bba <getMathOperation+0x7e>
        case '=':
            return EQUAL;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	e000      	b.n	8000bba <getMathOperation+0x7e>
    }
    return NONE;
 8000bb8:	2305      	movs	r3, #5
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <handle_calc>:

void handle_calc(char ch) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
    if (isJustReset) {
 8000bd2:	4bbb      	ldr	r3, [pc, #748]	; (8000ec0 <handle_calc+0x2f8>)
 8000bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d004      	beq.n	8000be6 <handle_calc+0x1e>
        resetScreen();
 8000bdc:	f7ff ff28 	bl	8000a30 <resetScreen>
        isJustReset = 0;
 8000be0:	4bb7      	ldr	r3, [pc, #732]	; (8000ec0 <handle_calc+0x2f8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	801a      	strh	r2, [r3, #0]
    }
    snprintf(message, sizeof(message),
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4ab6      	ldr	r2, [pc, #728]	; (8000ec4 <handle_calc+0x2fc>)
 8000bea:	2196      	movs	r1, #150	; 0x96
 8000bec:	48b6      	ldr	r0, [pc, #728]	; (8000ec8 <handle_calc+0x300>)
 8000bee:	f006 fa49 	bl	8007084 <sniprintf>
                             "Key in calc pressed is %d\r\n", ch);
                    sendMessage(message);
 8000bf2:	48b5      	ldr	r0, [pc, #724]	; (8000ec8 <handle_calc+0x300>)
 8000bf4:	f000 fa96 	bl	8001124 <sendMessage>
    enum MathOperation operationBuf = getMathOperation(ch);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff9e 	bl	8000b3c <getMathOperation>
 8000c00:	4603      	mov	r3, r0
 8000c02:	747b      	strb	r3, [r7, #17]
    if (operationBuf == NONE){
 8000c04:	7c7b      	ldrb	r3, [r7, #17]
 8000c06:	2b05      	cmp	r3, #5
 8000c08:	d111      	bne.n	8000c2e <handle_calc+0x66>
    	if (!isFirst && counter == 0)
 8000c0a:	4bb0      	ldr	r3, [pc, #704]	; (8000ecc <handle_calc+0x304>)
 8000c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d108      	bne.n	8000c26 <handle_calc+0x5e>
 8000c14:	4bae      	ldr	r3, [pc, #696]	; (8000ed0 <handle_calc+0x308>)
 8000c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d103      	bne.n	8000c26 <handle_calc+0x5e>
    		oled_SetCursor(0, 20);
 8000c1e:	2114      	movs	r1, #20
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 fdbf 	bl	80017a4 <oled_SetCursor>
    	writeScreenChar(ch);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff feed 	bl	8000a08 <writeScreenChar>
    }
    if (operationBuf != NONE && operationBuf != EQUAL && (!isFirst && counter == 0 ||  isFirst && counter > 0)) {
 8000c2e:	7c7b      	ldrb	r3, [r7, #17]
 8000c30:	2b05      	cmp	r3, #5
 8000c32:	d02a      	beq.n	8000c8a <handle_calc+0xc2>
 8000c34:	7c7b      	ldrb	r3, [r7, #17]
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d027      	beq.n	8000c8a <handle_calc+0xc2>
 8000c3a:	4ba4      	ldr	r3, [pc, #656]	; (8000ecc <handle_calc+0x304>)
 8000c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d104      	bne.n	8000c4e <handle_calc+0x86>
 8000c44:	4ba2      	ldr	r3, [pc, #648]	; (8000ed0 <handle_calc+0x308>)
 8000c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d009      	beq.n	8000c62 <handle_calc+0x9a>
 8000c4e:	4b9f      	ldr	r3, [pc, #636]	; (8000ecc <handle_calc+0x304>)
 8000c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d018      	beq.n	8000c8a <handle_calc+0xc2>
 8000c58:	4b9d      	ldr	r3, [pc, #628]	; (8000ed0 <handle_calc+0x308>)
 8000c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dd13      	ble.n	8000c8a <handle_calc+0xc2>
                oled_SetCursor(0, 10);
 8000c62:	210a      	movs	r1, #10
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fd9d 	bl	80017a4 <oled_SetCursor>
                writeScreenChar(ch);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fecb 	bl	8000a08 <writeScreenChar>
                operation = operationBuf;
 8000c72:	4a98      	ldr	r2, [pc, #608]	; (8000ed4 <handle_calc+0x30c>)
 8000c74:	7c7b      	ldrb	r3, [r7, #17]
 8000c76:	7013      	strb	r3, [r2, #0]
                isFirst = 0;
 8000c78:	4b94      	ldr	r3, [pc, #592]	; (8000ecc <handle_calc+0x304>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	801a      	strh	r2, [r3, #0]
                counter = 0;
 8000c7e:	4b94      	ldr	r3, [pc, #592]	; (8000ed0 <handle_calc+0x308>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	801a      	strh	r2, [r3, #0]
                oled_UpdateScreen();
 8000c84:	f000 fc58 	bl	8001538 <oled_UpdateScreen>
                return;
 8000c88:	e13d      	b.n	8000f06 <handle_calc+0x33e>
            }

    if (counter > 0) {
 8000c8a:	4b91      	ldr	r3, [pc, #580]	; (8000ed0 <handle_calc+0x308>)
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f340 80cf 	ble.w	8000e34 <handle_calc+0x26c>
        if (isFirst && operationBuf != NONE && operationBuf != EQUAL) {
 8000c96:	4b8d      	ldr	r3, [pc, #564]	; (8000ecc <handle_calc+0x304>)
 8000c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d019      	beq.n	8000cd4 <handle_calc+0x10c>
 8000ca0:	7c7b      	ldrb	r3, [r7, #17]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d016      	beq.n	8000cd4 <handle_calc+0x10c>
 8000ca6:	7c7b      	ldrb	r3, [r7, #17]
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d013      	beq.n	8000cd4 <handle_calc+0x10c>
            oled_SetCursor(0, 10);
 8000cac:	210a      	movs	r1, #10
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 fd78 	bl	80017a4 <oled_SetCursor>
            writeScreenChar(ch);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fea6 	bl	8000a08 <writeScreenChar>
            operation = operationBuf;
 8000cbc:	4a85      	ldr	r2, [pc, #532]	; (8000ed4 <handle_calc+0x30c>)
 8000cbe:	7c7b      	ldrb	r3, [r7, #17]
 8000cc0:	7013      	strb	r3, [r2, #0]
            isFirst = 0;
 8000cc2:	4b82      	ldr	r3, [pc, #520]	; (8000ecc <handle_calc+0x304>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	801a      	strh	r2, [r3, #0]
            counter = 0;
 8000cc8:	4b81      	ldr	r3, [pc, #516]	; (8000ed0 <handle_calc+0x308>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	801a      	strh	r2, [r3, #0]
            oled_UpdateScreen();
 8000cce:	f000 fc33 	bl	8001538 <oled_UpdateScreen>
            return;
 8000cd2:	e118      	b.n	8000f06 <handle_calc+0x33e>
        }
        if (!isFirst && operationBuf != NONE && operationBuf != EQUAL){
 8000cd4:	4b7d      	ldr	r3, [pc, #500]	; (8000ecc <handle_calc+0x304>)
 8000cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d108      	bne.n	8000cf0 <handle_calc+0x128>
 8000cde:	7c7b      	ldrb	r3, [r7, #17]
 8000ce0:	2b05      	cmp	r3, #5
 8000ce2:	d005      	beq.n	8000cf0 <handle_calc+0x128>
 8000ce4:	7c7b      	ldrb	r3, [r7, #17]
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d002      	beq.n	8000cf0 <handle_calc+0x128>
        	writeScreenErrorAndReset();
 8000cea:	f7ff febb 	bl	8000a64 <writeScreenErrorAndReset>
        	return;
 8000cee:	e10a      	b.n	8000f06 <handle_calc+0x33e>
        }
        if (!isFirst && operationBuf != NONE && operationBuf == EQUAL) {
 8000cf0:	4b76      	ldr	r3, [pc, #472]	; (8000ecc <handle_calc+0x304>)
 8000cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 809c 	bne.w	8000e34 <handle_calc+0x26c>
 8000cfc:	7c7b      	ldrb	r3, [r7, #17]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	f000 8098 	beq.w	8000e34 <handle_calc+0x26c>
 8000d04:	7c7b      	ldrb	r3, [r7, #17]
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	f040 8094 	bne.w	8000e34 <handle_calc+0x26c>
        	oled_SetCursor(0, 30);
 8000d0c:	211e      	movs	r1, #30
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 fd48 	bl	80017a4 <oled_SetCursor>
        	writeScreenChar(ch);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fe76 	bl	8000a08 <writeScreenChar>
        	oled_SetCursor(0, 40);
 8000d1c:	2128      	movs	r1, #40	; 0x28
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fd40 	bl	80017a4 <oled_SetCursor>
            long testOverflow;
            short res;
            switch (operation) {
 8000d24:	4b6b      	ldr	r3, [pc, #428]	; (8000ed4 <handle_calc+0x30c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d86c      	bhi.n	8000e06 <handle_calc+0x23e>
 8000d2c:	a201      	add	r2, pc, #4	; (adr r2, 8000d34 <handle_calc+0x16c>)
 8000d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d32:	bf00      	nop
 8000d34:	08000d45 	.word	0x08000d45
 8000d38:	08000d6f 	.word	0x08000d6f
 8000d3c:	08000d99 	.word	0x08000d99
 8000d40:	08000dc7 	.word	0x08000dc7
                case ADDITION: {
                    testOverflow = firstOperand + secondOperand;
 8000d44:	4b64      	ldr	r3, [pc, #400]	; (8000ed8 <handle_calc+0x310>)
 8000d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b63      	ldr	r3, [pc, #396]	; (8000edc <handle_calc+0x314>)
 8000d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d52:	4413      	add	r3, r2
 8000d54:	617b      	str	r3, [r7, #20]
                    res = firstOperand + secondOperand;
 8000d56:	4b60      	ldr	r3, [pc, #384]	; (8000ed8 <handle_calc+0x310>)
 8000d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b5f      	ldr	r3, [pc, #380]	; (8000edc <handle_calc+0x314>)
 8000d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	4413      	add	r3, r2
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	827b      	strh	r3, [r7, #18]
                    break;
 8000d6c:	e04b      	b.n	8000e06 <handle_calc+0x23e>
                }
                case SUBTRACTION: {
                    testOverflow = firstOperand - secondOperand;
 8000d6e:	4b5a      	ldr	r3, [pc, #360]	; (8000ed8 <handle_calc+0x310>)
 8000d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b59      	ldr	r3, [pc, #356]	; (8000edc <handle_calc+0x314>)
 8000d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
                    res = firstOperand - secondOperand;
 8000d80:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <handle_calc+0x310>)
 8000d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	4b54      	ldr	r3, [pc, #336]	; (8000edc <handle_calc+0x314>)
 8000d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	827b      	strh	r3, [r7, #18]
                    break;
 8000d96:	e036      	b.n	8000e06 <handle_calc+0x23e>
                }
                case MULTIPLICATION: {
                    testOverflow = firstOperand * secondOperand;
 8000d98:	4b4f      	ldr	r3, [pc, #316]	; (8000ed8 <handle_calc+0x310>)
 8000d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <handle_calc+0x314>)
 8000da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da6:	fb03 f302 	mul.w	r3, r3, r2
 8000daa:	617b      	str	r3, [r7, #20]
                    res = firstOperand * secondOperand;
 8000dac:	4b4a      	ldr	r3, [pc, #296]	; (8000ed8 <handle_calc+0x310>)
 8000dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b49      	ldr	r3, [pc, #292]	; (8000edc <handle_calc+0x314>)
 8000db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	fb12 f303 	smulbb	r3, r2, r3
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	827b      	strh	r3, [r7, #18]
                    break;
 8000dc4:	e01f      	b.n	8000e06 <handle_calc+0x23e>
                }
                case DIVISION: {
                    if (secondOperand == 0) {
 8000dc6:	4b45      	ldr	r3, [pc, #276]	; (8000edc <handle_calc+0x314>)
 8000dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d105      	bne.n	8000ddc <handle_calc+0x214>
                        //sprintf(message, "\n\rCant divide by zero\n\r");
                        writeScreenMessage(errorMessageDiv);
 8000dd0:	4843      	ldr	r0, [pc, #268]	; (8000ee0 <handle_calc+0x318>)
 8000dd2:	f7ff fe07 	bl	80009e4 <writeScreenMessage>
                        resetCalc();
 8000dd6:	f000 f89d 	bl	8000f14 <resetCalc>
                        return;
 8000dda:	e094      	b.n	8000f06 <handle_calc+0x33e>
                    }
                    testOverflow = firstOperand / secondOperand;
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <handle_calc+0x310>)
 8000dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <handle_calc+0x314>)
 8000de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dea:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
                    res = firstOperand / secondOperand;
 8000df0:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <handle_calc+0x310>)
 8000df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b38      	ldr	r3, [pc, #224]	; (8000edc <handle_calc+0x314>)
 8000dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e02:	827b      	strh	r3, [r7, #18]
                    break;
 8000e04:	bf00      	nop
                }
            }
            if (res == testOverflow) {
 8000e06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d10a      	bne.n	8000e26 <handle_calc+0x25e>
                sprintf(message, "%d", res);
 8000e10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4933      	ldr	r1, [pc, #204]	; (8000ee4 <handle_calc+0x31c>)
 8000e18:	482b      	ldr	r0, [pc, #172]	; (8000ec8 <handle_calc+0x300>)
 8000e1a:	f006 f967 	bl	80070ec <siprintf>
                writeScreenMessage(message);
 8000e1e:	482a      	ldr	r0, [pc, #168]	; (8000ec8 <handle_calc+0x300>)
 8000e20:	f7ff fde0 	bl	80009e4 <writeScreenMessage>
 8000e24:	e001      	b.n	8000e2a <handle_calc+0x262>
            } else {
                writeScreenError();
 8000e26:	f7ff fe11 	bl	8000a4c <writeScreenError>
            }
            resetCalc();
 8000e2a:	f000 f873 	bl	8000f14 <resetCalc>
            oled_UpdateScreen();
 8000e2e:	f000 fb83 	bl	8001538 <oled_UpdateScreen>
            return;
 8000e32:	e068      	b.n	8000f06 <handle_calc+0x33e>
        }
    }
    if (operationBuf != NONE || counter > 4) {
 8000e34:	7c7b      	ldrb	r3, [r7, #17]
 8000e36:	2b05      	cmp	r3, #5
 8000e38:	d104      	bne.n	8000e44 <handle_calc+0x27c>
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <handle_calc+0x308>)
 8000e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	dd02      	ble.n	8000e4a <handle_calc+0x282>
        writeScreenErrorAndReset();
 8000e44:	f7ff fe0e 	bl	8000a64 <writeScreenErrorAndReset>
        return;
 8000e48:	e05d      	b.n	8000f06 <handle_calc+0x33e>
    }


    short number = getNumber(ch);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe58 	bl	8000b02 <getNumber>
 8000e52:	4603      	mov	r3, r0
 8000e54:	81fb      	strh	r3, [r7, #14]
    if (number != -1) {
 8000e56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5e:	d050      	beq.n	8000f02 <handle_calc+0x33a>
        if (isFirst) {
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <handle_calc+0x304>)
 8000e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d016      	beq.n	8000e98 <handle_calc+0x2d0>
            short numberBuf = checkNumbertoOverflow(firstOperand, number);
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <handle_calc+0x310>)
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e70:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fe18 	bl	8000aac <checkNumbertoOverflow>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	817b      	strh	r3, [r7, #10]
            if (numberBuf == -1) {
 8000e80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e88:	d102      	bne.n	8000e90 <handle_calc+0x2c8>
                writeScreenErrorAndReset();
 8000e8a:	f7ff fdeb 	bl	8000a64 <writeScreenErrorAndReset>
                return;
 8000e8e:	e03a      	b.n	8000f06 <handle_calc+0x33e>
            }
            firstOperand = numberBuf;
 8000e90:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <handle_calc+0x310>)
 8000e92:	897b      	ldrh	r3, [r7, #10]
 8000e94:	8013      	strh	r3, [r2, #0]
 8000e96:	e02a      	b.n	8000eee <handle_calc+0x326>
        } else {
            short numberBuf = checkNumbertoOverflow(secondOperand, number);
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <handle_calc+0x314>)
 8000e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fe01 	bl	8000aac <checkNumbertoOverflow>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	81bb      	strh	r3, [r7, #12]
            if (numberBuf == -1) {
 8000eae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb6:	d117      	bne.n	8000ee8 <handle_calc+0x320>
                writeScreenErrorAndReset();
 8000eb8:	f7ff fdd4 	bl	8000a64 <writeScreenErrorAndReset>
                return;
 8000ebc:	e023      	b.n	8000f06 <handle_calc+0x33e>
 8000ebe:	bf00      	nop
 8000ec0:	2000002e 	.word	0x2000002e
 8000ec4:	08007a60 	.word	0x08007a60
 8000ec8:	2000040c 	.word	0x2000040c
 8000ecc:	2000002c 	.word	0x2000002c
 8000ed0:	200004a2 	.word	0x200004a2
 8000ed4:	20000030 	.word	0x20000030
 8000ed8:	200004a4 	.word	0x200004a4
 8000edc:	200004a6 	.word	0x200004a6
 8000ee0:	20000050 	.word	0x20000050
 8000ee4:	08007a7c 	.word	0x08007a7c
            }
            secondOperand = numberBuf;
 8000ee8:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <handle_calc+0x344>)
 8000eea:	89bb      	ldrh	r3, [r7, #12]
 8000eec:	8013      	strh	r3, [r2, #0]
        }
        counter++;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <handle_calc+0x348>)
 8000ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b21a      	sxth	r2, r3
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <handle_calc+0x348>)
 8000efe:	801a      	strh	r2, [r3, #0]
 8000f00:	e001      	b.n	8000f06 <handle_calc+0x33e>
    } else {
        writeScreenErrorAndReset();
 8000f02:	f7ff fdaf 	bl	8000a64 <writeScreenErrorAndReset>
    }
}
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200004a6 	.word	0x200004a6
 8000f10:	200004a2 	.word	0x200004a2

08000f14 <resetCalc>:
    }
    return -1;
}

void
resetCalc() {
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
    isFirst = 1;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <resetCalc+0x34>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	801a      	strh	r2, [r3, #0]
    counter = 0;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <resetCalc+0x38>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	801a      	strh	r2, [r3, #0]
    firstOperand = 0;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <resetCalc+0x3c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	801a      	strh	r2, [r3, #0]
    secondOperand = 0;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <resetCalc+0x40>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	801a      	strh	r2, [r3, #0]
    operation = NONE;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <resetCalc+0x44>)
 8000f32:	2205      	movs	r2, #5
 8000f34:	701a      	strb	r2, [r3, #0]
    isJustReset = 1;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <resetCalc+0x48>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	801a      	strh	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2000002c 	.word	0x2000002c
 8000f4c:	200004a2 	.word	0x200004a2
 8000f50:	200004a4 	.word	0x200004a4
 8000f54:	200004a6 	.word	0x200004a6
 8000f58:	20000030 	.word	0x20000030
 8000f5c:	2000002e 	.word	0x2000002e

08000f60 <buffer_add>:
void buffer_init() {
    for (size_t i = 0; i < BUFFER_SIZE; ++i)
        buffer[i] = 0;
}

void buffer_add(uint8_t num) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    buffer[write_pointer] = num;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <buffer_add+0x30>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4909      	ldr	r1, [pc, #36]	; (8000f94 <buffer_add+0x34>)
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	54ca      	strb	r2, [r1, r3]
    write_pointer = (write_pointer + 1) % BUFFER_SIZE;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <buffer_add+0x30>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f003 031f 	and.w	r3, r3, #31
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <buffer_add+0x30>)
 8000f80:	6013      	str	r3, [r2, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000400 	.word	0x20000400
 8000f94:	20000a34 	.word	0x20000a34

08000f98 <buffer_read>:

int buffer_read() {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
    if (read_pointer == write_pointer) {
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <buffer_read+0x40>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <buffer_read+0x44>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d102      	bne.n	8000fb0 <buffer_read+0x18>
        return -1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e00c      	b.n	8000fca <buffer_read+0x32>
    }
    uint8_t num = buffer[read_pointer];
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <buffer_read+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <buffer_read+0x48>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	71fb      	strb	r3, [r7, #7]
    read_pointer = (read_pointer + 1) % BUFFER_SIZE;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <buffer_read+0x40>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <buffer_read+0x40>)
 8000fc6:	6013      	str	r3, [r2, #0]
    return num;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000404 	.word	0x20000404
 8000fdc:	20000400 	.word	0x20000400
 8000fe0:	20000a34 	.word	0x20000a34

08000fe4 <keyboard_read>:

void keyboard_read(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
//    static uint8_t const rows[4] = { 0xF7, 0x7B, 0x3D, 0x1E };
    static uint8_t const rows[4] = {0x1E, 0x3D, 0x7B, 0xF7};
    static int current_row = 0;
    static int row_result[4] = {0, 0, 0, 0};

    if (ks_state == 0) {
 8000fea:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <keyboard_read+0xd0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d15b      	bne.n	80010aa <keyboard_read+0xc6>
        if (row_result[current_row] != ks_result) {
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <keyboard_read+0xd4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a31      	ldr	r2, [pc, #196]	; (80010bc <keyboard_read+0xd8>)
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	4a30      	ldr	r2, [pc, #192]	; (80010c0 <keyboard_read+0xdc>)
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	4293      	cmp	r3, r2
 8001002:	d036      	beq.n	8001072 <keyboard_read+0x8e>
            uint8_t keyNum = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	71fb      	strb	r3, [r7, #7]
            if (ks_result & 1) {
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <keyboard_read+0xdc>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00a      	beq.n	800102a <keyboard_read+0x46>
                buffer_add(3 * current_row + 3);
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <keyboard_read+0xd4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	0052      	lsls	r2, r2, #1
 8001020:	4413      	add	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff9b 	bl	8000f60 <buffer_add>
            }
            if (ks_result & 2) {
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <keyboard_read+0xdc>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00b      	beq.n	800104e <keyboard_read+0x6a>
                buffer_add(3 * current_row + 2);
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <keyboard_read+0xd4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	0052      	lsls	r2, r2, #1
 8001040:	4413      	add	r3, r2
 8001042:	b2db      	uxtb	r3, r3
 8001044:	3302      	adds	r3, #2
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff89 	bl	8000f60 <buffer_add>
            }
            if (ks_result & 4) {
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <keyboard_read+0xdc>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00b      	beq.n	8001072 <keyboard_read+0x8e>
                buffer_add(3 * current_row + 1);
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <keyboard_read+0xd4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	0052      	lsls	r2, r2, #1
 8001064:	4413      	add	r3, r2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	3301      	adds	r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff77 	bl	8000f60 <buffer_add>
            }
        }

        row_result[current_row] = ks_result;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <keyboard_read+0xdc>)
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <keyboard_read+0xd4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4611      	mov	r1, r2
 800107c:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <keyboard_read+0xd8>)
 800107e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        current_row = (current_row + 1) % 4;
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <keyboard_read+0xd4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	425a      	negs	r2, r3
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	f002 0203 	and.w	r2, r2, #3
 8001092:	bf58      	it	pl
 8001094:	4253      	negpl	r3, r2
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <keyboard_read+0xd4>)
 8001098:	6013      	str	r3, [r2, #0]
        ks_current_row = rows[current_row];
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <keyboard_read+0xd4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <keyboard_read+0xe0>)
 80010a0:	5cd2      	ldrb	r2, [r2, r3]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <keyboard_read+0xe4>)
 80010a4:	701a      	strb	r2, [r3, #0]
        ks_continue();
 80010a6:	f7ff fb7f 	bl	80007a8 <ks_continue>
    }
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200003f4 	.word	0x200003f4
 80010b8:	200004b8 	.word	0x200004b8
 80010bc:	200004bc 	.word	0x200004bc
 80010c0:	200003f8 	.word	0x200003f8
 80010c4:	0800841c 	.word	0x0800841c
 80010c8:	200003f9 	.word	0x200003f9

080010cc <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    if (hi2c == &hi2c1 && ks_state) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_I2C_MemTxCpltCallback+0x24>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d105      	bne.n	80010e8 <HAL_I2C_MemTxCpltCallback+0x1c>
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_I2C_MemTxCpltCallback+0x28>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_I2C_MemTxCpltCallback+0x1c>
        ks_continue();
 80010e4:	f7ff fb60 	bl	80007a8 <ks_continue>
    }
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200008e0 	.word	0x200008e0
 80010f4:	200003f4 	.word	0x200003f4

080010f8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    if (hi2c == &hi2c1 && ks_state) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_I2C_MemRxCpltCallback+0x24>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d105      	bne.n	8001114 <HAL_I2C_MemRxCpltCallback+0x1c>
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_I2C_MemRxCpltCallback+0x28>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_I2C_MemRxCpltCallback+0x1c>
        ks_continue();
 8001110:	f7ff fb4a 	bl	80007a8 <ks_continue>
    }
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200008e0 	.word	0x200008e0
 8001120:	200003f4 	.word	0x200003f4

08001124 <sendMessage>:
    CONFIG = 0x03 //Read/write byte 1111 1111
} pca9538_regs_t;



void sendMessage(char *message) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    int size = strlen(message);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff f84f 	bl	80001d0 <strlen>
 8001132:	4603      	mov	r3, r0
 8001134:	60fb      	str	r3, [r7, #12]
//    if (mode)
    HAL_UART_Transmit(&huart6, (uint8_t *) message, size, 100);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	b29a      	uxth	r2, r3
 800113a:	2364      	movs	r3, #100	; 0x64
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <sendMessage+0x28>)
 8001140:	f005 f853 	bl	80061ea <HAL_UART_Transmit>
//            isReaded1 = HAL_UART_Transmit_IT(&huart6, (uint8_t *) message, size);
//            curtime = getCurrentTime();
//            counter++;
//        }
//    }
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000ae8 	.word	0x20000ae8

08001150 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    HAL_StatusTypeDef isReaded;
    int shortPressTime = 200;
 8001156:	23c8      	movs	r3, #200	; 0xc8
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    int isBeingProceed = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    long startTimePressedButton = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
    char chtest[] = "F\n\r";
 8001162:	4b59      	ldr	r3, [pc, #356]	; (80012c8 <main+0x178>)
 8001164:	603b      	str	r3, [r7, #0]
    int melody_tick = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
    int new = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
    int played = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]

    currentMelody = melody_AHA;
 8001172:	4b56      	ldr	r3, [pc, #344]	; (80012cc <main+0x17c>)
 8001174:	4a56      	ldr	r2, [pc, #344]	; (80012d0 <main+0x180>)
 8001176:	601a      	str	r2, [r3, #0]
    currentMelodySize = sizeof(melody_AHA) / sizeof(melody_AHA[0]);
 8001178:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <main+0x184>)
 800117a:	22c0      	movs	r2, #192	; 0xc0
 800117c:	601a      	str	r2, [r3, #0]
    currentTempo = TEMPO_AHA;
 800117e:	4b56      	ldr	r3, [pc, #344]	; (80012d8 <main+0x188>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a56      	ldr	r2, [pc, #344]	; (80012dc <main+0x18c>)
 8001184:	6013      	str	r3, [r2, #0]
    currentMelodyPosition = 0;
 8001186:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <main+0x190>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    int cur_melody = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
    int cur_pause = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
    int tempo = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
    int noteDuration = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800119c:	f000 fe18 	bl	8001dd0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80011a0:	f000 f8b2 	bl	8001308 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80011a4:	f7ff f9e8 	bl	8000578 <MX_GPIO_Init>
    MX_USART6_UART_Init();
 80011a8:	f000 fd6e 	bl	8001c88 <MX_USART6_UART_Init>
    MX_I2C1_Init();
 80011ac:	f7ff fa76 	bl	800069c <MX_I2C1_Init>
    MX_TIM2_Init();
 80011b0:	f000 fc5c 	bl	8001a6c <MX_TIM2_Init>
    MX_TIM6_Init();
 80011b4:	f000 fcb2 	bl	8001b1c <MX_TIM6_Init>
    /* USER CODE BEGIN 2 */
    sound_driver_init();
 80011b8:	f000 fb7c 	bl	80018b4 <sound_driver_init>
    oled_Init();
 80011bc:	f000 f92c 	bl	8001418 <oled_Init>
    oled_Fill(Black);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f995 	bl	80014f0 <oled_Fill>
    oled_UpdateScreen();
 80011c6:	f000 f9b7 	bl	8001538 <oled_UpdateScreen>
    HAL_TIM_Base_Start_IT(&htim6);
 80011ca:	4846      	ldr	r0, [pc, #280]	; (80012e4 <main+0x194>)
 80011cc:	f004 f936 	bl	800543c <HAL_TIM_Base_Start_IT>

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
//        blinkGreenDiode();
    	keyboard_read();
 80011d0:	f7ff ff08 	bl	8000fe4 <keyboard_read>
//    	delay(10);
        if (!getButtonState()) {
 80011d4:	f7ff fa4e 	bl	8000674 <getButtonState>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d108      	bne.n	80011f0 <main+0xa0>
            if (!isBeingProceed) {
 80011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d125      	bne.n	8001230 <main+0xe0>
                startTimePressedButton = getCurrentTime();
 80011e4:	f7ff fa52 	bl	800068c <getCurrentTime>
 80011e8:	62b8      	str	r0, [r7, #40]	; 0x28
                isBeingProceed = 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ee:	e01f      	b.n	8001230 <main+0xe0>
            }
        } else {
            if (isBeingProceed && getCurrentTime() - startTimePressedButton > shortPressTime) {
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d01a      	beq.n	800122c <main+0xdc>
 80011f6:	f7ff fa49 	bl	800068c <getCurrentTime>
 80011fa:	4602      	mov	r2, r0
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001202:	429a      	cmp	r2, r3
 8001204:	da12      	bge.n	800122c <main+0xdc>
                if (mode == 1) {
 8001206:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <main+0x198>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d106      	bne.n	800121c <main+0xcc>
                    mode = 0;
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <main+0x198>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
                    sendMessage(mode0);
 8001214:	4835      	ldr	r0, [pc, #212]	; (80012ec <main+0x19c>)
 8001216:	f7ff ff85 	bl	8001124 <sendMessage>
 800121a:	e005      	b.n	8001228 <main+0xd8>
                } else {
                    mode = 1;
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <main+0x198>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]
                    sendMessage(mode1);
 8001222:	4833      	ldr	r0, [pc, #204]	; (80012f0 <main+0x1a0>)
 8001224:	f7ff ff7e 	bl	8001124 <sendMessage>
                }
                sound_driver_volume_mute();
 8001228:	f000 fb52 	bl	80018d0 <sound_driver_volume_mute>
            }
            isBeingProceed = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        int key_pressed = buffer_read();
 8001230:	f7ff feb2 	bl	8000f98 <buffer_read>
 8001234:	6078      	str	r0, [r7, #4]
//        snprintf(message, sizeof(message),
//                                 "Key beffore pressed is %d\r\n", key_pressed);
//        sendMessage(message);

        if (mode) {
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <main+0x198>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00f      	beq.n	800125e <main+0x10e>
            if (key_pressed > 0 && key_pressed < 13) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	dd3e      	ble.n	80012c2 <main+0x172>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b0c      	cmp	r3, #12
 8001248:	dc3b      	bgt.n	80012c2 <main+0x172>
                snprintf(message, sizeof(message),
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <main+0x1a4>)
 800124e:	2196      	movs	r1, #150	; 0x96
 8001250:	4829      	ldr	r0, [pc, #164]	; (80012f8 <main+0x1a8>)
 8001252:	f005 ff17 	bl	8007084 <sniprintf>
                         "Key pressed is %d\r\n", key_pressed);
                sendMessage(message);
 8001256:	4828      	ldr	r0, [pc, #160]	; (80012f8 <main+0x1a8>)
 8001258:	f7ff ff64 	bl	8001124 <sendMessage>
            }
            continue;
 800125c:	e031      	b.n	80012c2 <main+0x172>
        }
        if (key_pressed > 0 && key_pressed < 13) {
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	ddb5      	ble.n	80011d0 <main+0x80>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	dcb2      	bgt.n	80011d0 <main+0x80>
            if (key_pressed >= 1 && key_pressed <= 9) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	dd0a      	ble.n	8001286 <main+0x136>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b09      	cmp	r3, #9
 8001274:	dc07      	bgt.n	8001286 <main+0x136>
                handle_calc(calcChars[key_pressed]);
 8001276:	4a21      	ldr	r2, [pc, #132]	; (80012fc <main+0x1ac>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fca2 	bl	8000bc8 <handle_calc>
                continue;
 8001284:	e01e      	b.n	80012c4 <main+0x174>
            }
            if (key_pressed == 11) {
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0b      	cmp	r3, #11
 800128a:	d105      	bne.n	8001298 <main+0x148>
                handle_calc(calcChars[0]);
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <main+0x1ac>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fc99 	bl	8000bc8 <handle_calc>
                continue;
 8001296:	e015      	b.n	80012c4 <main+0x174>
            }
            if (key_pressed == 12){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b0c      	cmp	r3, #12
 800129c:	d105      	bne.n	80012aa <main+0x15a>
                handle_calc(calcCharsOperations[4]);
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <main+0x1b0>)
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fc90 	bl	8000bc8 <handle_calc>
                continue;
 80012a8:	e00c      	b.n	80012c4 <main+0x174>
            }
            nextOperation();
 80012aa:	f7ff fbe5 	bl	8000a78 <nextOperation>
            handle_calc(calcCharsOperations[curCalcsOperation]);
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <main+0x1b4>)
 80012b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <main+0x1b0>)
 80012b8:	5c9b      	ldrb	r3, [r3, r2]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fc84 	bl	8000bc8 <handle_calc>
 80012c0:	e786      	b.n	80011d0 <main+0x80>
            continue;
 80012c2:	bf00      	nop
    while (1) {
 80012c4:	e784      	b.n	80011d0 <main+0x80>
 80012c6:	bf00      	nop
 80012c8:	000d0a46 	.word	0x000d0a46
 80012cc:	20000a54 	.word	0x20000a54
 80012d0:	20000068 	.word	0x20000068
 80012d4:	200004b0 	.word	0x200004b0
 80012d8:	20000064 	.word	0x20000064
 80012dc:	200004ac 	.word	0x200004ac
 80012e0:	200004b4 	.word	0x200004b4
 80012e4:	20000a58 	.word	0x20000a58
 80012e8:	20000408 	.word	0x20000408
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000018 	.word	0x20000018
 80012f4:	08007c9c 	.word	0x08007c9c
 80012f8:	2000040c 	.word	0x2000040c
 80012fc:	20000034 	.word	0x20000034
 8001300:	20000040 	.word	0x20000040
 8001304:	200004a8 	.word	0x200004a8

08001308 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b094      	sub	sp, #80	; 0x50
 800130c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0320 	add.w	r3, r7, #32
 8001312:	2230      	movs	r2, #48	; 0x30
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f005 feac 	bl	8007074 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <SystemClock_Config+0xcc>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <SystemClock_Config+0xcc>)
 8001336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133a:	6413      	str	r3, [r2, #64]	; 0x40
 800133c:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <SystemClock_Config+0xcc>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <SystemClock_Config+0xd0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <SystemClock_Config+0xd0>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <SystemClock_Config+0xd0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136e:	2302      	movs	r3, #2
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001372:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 8001378:	2319      	movs	r3, #25
 800137a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 800137c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001386:	2304      	movs	r3, #4
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fbbc 	bl	8004b0c <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x96>
        Error_Handler();
 800139a:	f000 f81f 	bl	80013dc <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800139e:	230f      	movs	r3, #15
 80013a0:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a2:	2302      	movs	r3, #2
 80013a4:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013ae:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2105      	movs	r1, #5
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 fe1d 	bl	8004ffc <HAL_RCC_ClockConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0xc4>
        Error_Handler();
 80013c8:	f000 f808 	bl	80013dc <Error_Handler>
    }
}
 80013cc:	bf00      	nop
 80013ce:	3750      	adds	r7, #80	; 0x50
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000

080013dc <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af04      	add	r7, sp, #16
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 80013f2:	230a      	movs	r3, #10
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	2301      	movs	r3, #1
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	2200      	movs	r2, #0
 8001402:	2178      	movs	r1, #120	; 0x78
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <oled_WriteCommand+0x2c>)
 8001406:	f001 fa3d 	bl	8002884 <HAL_I2C_Mem_Write>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200008e0 	.word	0x200008e0

08001418 <oled_Init>:


uint8_t oled_Init(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800141c:	2064      	movs	r0, #100	; 0x64
 800141e:	f000 fd49 	bl	8001eb4 <HAL_Delay>

    oled_WriteCommand(0xAE);
 8001422:	20ae      	movs	r0, #174	; 0xae
 8001424:	f7ff ffe0 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x20);
 8001428:	2020      	movs	r0, #32
 800142a:	f7ff ffdd 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x10);
 800142e:	2010      	movs	r0, #16
 8001430:	f7ff ffda 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xB0);
 8001434:	20b0      	movs	r0, #176	; 0xb0
 8001436:	f7ff ffd7 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xC8);
 800143a:	20c8      	movs	r0, #200	; 0xc8
 800143c:	f7ff ffd4 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x00);
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ffd1 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x10);
 8001446:	2010      	movs	r0, #16
 8001448:	f7ff ffce 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x40);
 800144c:	2040      	movs	r0, #64	; 0x40
 800144e:	f7ff ffcb 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x81);
 8001452:	2081      	movs	r0, #129	; 0x81
 8001454:	f7ff ffc8 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xFF);
 8001458:	20ff      	movs	r0, #255	; 0xff
 800145a:	f7ff ffc5 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xA1);
 800145e:	20a1      	movs	r0, #161	; 0xa1
 8001460:	f7ff ffc2 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xA6);
 8001464:	20a6      	movs	r0, #166	; 0xa6
 8001466:	f7ff ffbf 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xA8);
 800146a:	20a8      	movs	r0, #168	; 0xa8
 800146c:	f7ff ffbc 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x3F);
 8001470:	203f      	movs	r0, #63	; 0x3f
 8001472:	f7ff ffb9 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xA4);
 8001476:	20a4      	movs	r0, #164	; 0xa4
 8001478:	f7ff ffb6 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xD3);
 800147c:	20d3      	movs	r0, #211	; 0xd3
 800147e:	f7ff ffb3 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x00);
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff ffb0 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xD5);
 8001488:	20d5      	movs	r0, #213	; 0xd5
 800148a:	f7ff ffad 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xF0);
 800148e:	20f0      	movs	r0, #240	; 0xf0
 8001490:	f7ff ffaa 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xD9);
 8001494:	20d9      	movs	r0, #217	; 0xd9
 8001496:	f7ff ffa7 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x22);
 800149a:	2022      	movs	r0, #34	; 0x22
 800149c:	f7ff ffa4 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xDA);
 80014a0:	20da      	movs	r0, #218	; 0xda
 80014a2:	f7ff ffa1 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x12);
 80014a6:	2012      	movs	r0, #18
 80014a8:	f7ff ff9e 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xDB);
 80014ac:	20db      	movs	r0, #219	; 0xdb
 80014ae:	f7ff ff9b 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x20);
 80014b2:	2020      	movs	r0, #32
 80014b4:	f7ff ff98 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x8D);
 80014b8:	208d      	movs	r0, #141	; 0x8d
 80014ba:	f7ff ff95 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0x14);
 80014be:	2014      	movs	r0, #20
 80014c0:	f7ff ff92 	bl	80013e8 <oled_WriteCommand>
    oled_WriteCommand(0xAF);
 80014c4:	20af      	movs	r0, #175	; 0xaf
 80014c6:	f7ff ff8f 	bl	80013e8 <oled_WriteCommand>

    oled_Fill(Black);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f810 	bl	80014f0 <oled_Fill>

    oled_UpdateScreen();
 80014d0:	f000 f832 	bl	8001538 <oled_UpdateScreen>

    OLED.CurrentX = 0;
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <oled_Init+0xd4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	801a      	strh	r2, [r3, #0]
    OLED.CurrentY = 0;
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <oled_Init+0xd4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	805a      	strh	r2, [r3, #2]

    OLED.Initialized = 1;
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <oled_Init+0xd4>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	715a      	strb	r2, [r3, #5]

    return 1;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200008cc 	.word	0x200008cc

080014f0 <oled_Fill>:

void oled_Fill(OLED_COLOR color) {
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(OLED_Buffer); i++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e00d      	b.n	800151c <oled_Fill+0x2c>
        OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <oled_Fill+0x1a>
 8001506:	2100      	movs	r1, #0
 8001508:	e000      	b.n	800150c <oled_Fill+0x1c>
 800150a:	21ff      	movs	r1, #255	; 0xff
 800150c:	4a09      	ldr	r2, [pc, #36]	; (8001534 <oled_Fill+0x44>)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	460a      	mov	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001522:	d3ed      	bcc.n	8001500 <oled_Fill+0x10>
    }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	200004cc 	.word	0x200004cc

08001538 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af04      	add	r7, sp, #16
    uint8_t i;

    for (i = 0; i < 8; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	e01d      	b.n	8001580 <oled_UpdateScreen+0x48>
        oled_WriteCommand(0xB0 + i);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	3b50      	subs	r3, #80	; 0x50
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff4c 	bl	80013e8 <oled_WriteCommand>
        oled_WriteCommand(0x00);
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ff49 	bl	80013e8 <oled_WriteCommand>
        oled_WriteCommand(0x10);
 8001556:	2010      	movs	r0, #16
 8001558:	f7ff ff46 	bl	80013e8 <oled_WriteCommand>

        HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,25);
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	01db      	lsls	r3, r3, #7
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <oled_UpdateScreen+0x58>)
 8001562:	4413      	add	r3, r2
 8001564:	2219      	movs	r2, #25
 8001566:	9202      	str	r2, [sp, #8]
 8001568:	2280      	movs	r2, #128	; 0x80
 800156a:	9201      	str	r2, [sp, #4]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	2301      	movs	r3, #1
 8001570:	2240      	movs	r2, #64	; 0x40
 8001572:	2178      	movs	r1, #120	; 0x78
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <oled_UpdateScreen+0x5c>)
 8001576:	f001 f985 	bl	8002884 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	3301      	adds	r3, #1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b07      	cmp	r3, #7
 8001584:	d9de      	bls.n	8001544 <oled_UpdateScreen+0xc>
    }
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200004cc 	.word	0x200004cc
 8001594:	200008e0 	.word	0x200008e0

08001598 <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	460b      	mov	r3, r1
 80015a4:	71bb      	strb	r3, [r7, #6]
 80015a6:	4613      	mov	r3, r2
 80015a8:	717b      	strb	r3, [r7, #5]
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db48      	blt.n	8001644 <oled_DrawPixel+0xac>
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	2b3f      	cmp	r3, #63	; 0x3f
 80015b6:	d845      	bhi.n	8001644 <oled_DrawPixel+0xac>
        return;
    }

    if (OLED.Inverted) {
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <oled_DrawPixel+0xb8>)
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <oled_DrawPixel+0x36>
        color = (OLED_COLOR)!color;
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	717b      	strb	r3, [r7, #5]
    }

    if (color == White) {
 80015ce:	797b      	ldrb	r3, [r7, #5]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d11a      	bne.n	800160a <oled_DrawPixel+0x72>
        OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 80015d4:	79fa      	ldrb	r2, [r7, #7]
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	08db      	lsrs	r3, r3, #3
 80015da:	b2d8      	uxtb	r0, r3
 80015dc:	4603      	mov	r3, r0
 80015de:	01db      	lsls	r3, r3, #7
 80015e0:	4413      	add	r3, r2
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <oled_DrawPixel+0xbc>)
 80015e4:	5cd3      	ldrb	r3, [r2, r3]
 80015e6:	b25a      	sxtb	r2, r3
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b259      	sxtb	r1, r3
 80015fa:	79fa      	ldrb	r2, [r7, #7]
 80015fc:	4603      	mov	r3, r0
 80015fe:	01db      	lsls	r3, r3, #7
 8001600:	4413      	add	r3, r2
 8001602:	b2c9      	uxtb	r1, r1
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <oled_DrawPixel+0xbc>)
 8001606:	54d1      	strb	r1, [r2, r3]
 8001608:	e01d      	b.n	8001646 <oled_DrawPixel+0xae>
    } else {
        OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	b2d8      	uxtb	r0, r3
 8001612:	4603      	mov	r3, r0
 8001614:	01db      	lsls	r3, r3, #7
 8001616:	4413      	add	r3, r2
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <oled_DrawPixel+0xbc>)
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	b25a      	sxtb	r2, r3
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	2101      	movs	r1, #1
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	b25b      	sxtb	r3, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	b25b      	sxtb	r3, r3
 8001630:	4013      	ands	r3, r2
 8001632:	b259      	sxtb	r1, r3
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	4603      	mov	r3, r0
 8001638:	01db      	lsls	r3, r3, #7
 800163a:	4413      	add	r3, r2
 800163c:	b2c9      	uxtb	r1, r1
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <oled_DrawPixel+0xbc>)
 8001640:	54d1      	strb	r1, [r2, r3]
 8001642:	e000      	b.n	8001646 <oled_DrawPixel+0xae>
        return;
 8001644:	bf00      	nop
    }
}
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	200008cc 	.word	0x200008cc
 8001654:	200004cc 	.word	0x200004cc

08001658 <oled_WriteChar>:
    oled_DrawHLine(x1, x2, y1, color);
    oled_DrawHLine(x1, x2, y2, color);
    oled_DrawVLine(y1, y2, x1, color);
    oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	4604      	mov	r4, r0
 8001660:	1d38      	adds	r0, r7, #4
 8001662:	e880 0006 	stmia.w	r0, {r1, r2}
 8001666:	461a      	mov	r2, r3
 8001668:	4623      	mov	r3, r4
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	4613      	mov	r3, r2
 800166e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <oled_WriteChar+0xfc>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	2b7f      	cmp	r3, #127	; 0x7f
 800167c:	dc06      	bgt.n	800168c <oled_WriteChar+0x34>
        OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <oled_WriteChar+0xfc>)
 8001680:	885b      	ldrh	r3, [r3, #2]
 8001682:	461a      	mov	r2, r3
 8001684:	797b      	ldrb	r3, [r7, #5]
 8001686:	4413      	add	r3, r2
    if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8001688:	2b3f      	cmp	r3, #63	; 0x3f
 800168a:	dd01      	ble.n	8001690 <oled_WriteChar+0x38>
        return 0;
 800168c:	2300      	movs	r3, #0
 800168e:	e05d      	b.n	800174c <oled_WriteChar+0xf4>
    }

    for (i = 0; i < Font.FontHeight; i++) {
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	e04c      	b.n	8001730 <oled_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	3b20      	subs	r3, #32
 800169c:	7979      	ldrb	r1, [r7, #5]
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	440b      	add	r3, r1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	e034      	b.n	8001720 <oled_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d012      	beq.n	80016ec <oled_WriteChar+0x94>
                oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <oled_WriteChar+0xfc>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	b2d8      	uxtb	r0, r3
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <oled_WriteChar+0xfc>)
 80016d6:	885b      	ldrh	r3, [r3, #2]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4413      	add	r3, r2
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	7bba      	ldrb	r2, [r7, #14]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff ff57 	bl	8001598 <oled_DrawPixel>
 80016ea:	e016      	b.n	800171a <oled_WriteChar+0xc2>
            } else {
                oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <oled_WriteChar+0xfc>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	b2d8      	uxtb	r0, r3
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <oled_WriteChar+0xfc>)
 80016fc:	885b      	ldrh	r3, [r3, #2]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4413      	add	r3, r2
 8001706:	b2d9      	uxtb	r1, r3
 8001708:	7bbb      	ldrb	r3, [r7, #14]
 800170a:	2b00      	cmp	r3, #0
 800170c:	bf0c      	ite	eq
 800170e:	2301      	moveq	r3, #1
 8001710:	2300      	movne	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	f7ff ff3f 	bl	8001598 <oled_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	3301      	adds	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	793b      	ldrb	r3, [r7, #4]
 8001722:	461a      	mov	r2, r3
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	4293      	cmp	r3, r2
 8001728:	d3c5      	bcc.n	80016b6 <oled_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	797b      	ldrb	r3, [r7, #5]
 8001732:	461a      	mov	r2, r3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4293      	cmp	r3, r2
 8001738:	d3ad      	bcc.n	8001696 <oled_WriteChar+0x3e>
            }
        }
    }

    OLED.CurrentX += Font.FontWidth;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <oled_WriteChar+0xfc>)
 800173c:	881a      	ldrh	r2, [r3, #0]
 800173e:	793b      	ldrb	r3, [r7, #4]
 8001740:	b29b      	uxth	r3, r3
 8001742:	4413      	add	r3, r2
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b03      	ldr	r3, [pc, #12]	; (8001754 <oled_WriteChar+0xfc>)
 8001748:	801a      	strh	r2, [r3, #0]

    return ch;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3724      	adds	r7, #36	; 0x24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	200008cc 	.word	0x200008cc

08001758 <oled_WriteString>:

char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	1d38      	adds	r0, r7, #4
 8001762:	e880 0006 	stmia.w	r0, {r1, r2}
 8001766:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001768:	e012      	b.n	8001790 <oled_WriteString+0x38>
        if (oled_WriteChar(*str, Font, color) != *str) {
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	7818      	ldrb	r0, [r3, #0]
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	1d3a      	adds	r2, r7, #4
 8001772:	ca06      	ldmia	r2, {r1, r2}
 8001774:	f7ff ff70 	bl	8001658 <oled_WriteChar>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d002      	beq.n	800178a <oled_WriteString+0x32>
            return *str;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	e008      	b.n	800179c <oled_WriteString+0x44>
        }
        str++;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3301      	adds	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1e8      	bne.n	800176a <oled_WriteString+0x12>
    }
    return *str;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	781b      	ldrb	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]
    OLED.CurrentX = x;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <oled_SetCursor+0x2c>)
 80017ba:	801a      	strh	r2, [r3, #0]
    OLED.CurrentY = y;
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <oled_SetCursor+0x2c>)
 80017c2:	805a      	strh	r2, [r3, #2]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	200008cc 	.word	0x200008cc

080017d4 <PCA9538_Read_Register>:
#include "sdk_uart.h"
#include "pca9538.h"
#include "utils.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg,
		uint8_t *buf) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af02      	add	r7, sp, #8
 80017da:	4603      	mov	r3, r0
 80017dc:	603a      	str	r2, [r7, #0]
 80017de:	80fb      	strh	r3, [r7, #6]
 80017e0:	460b      	mov	r3, r1
 80017e2:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef retcode;
	while ((retcode = HAL_I2C_Mem_Read_IT(&hi2c1, addr | 1, reg, 1, buf, 1))
 80017e4:	bf00      	nop
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	b299      	uxth	r1, r3
 80017ee:	797b      	ldrb	r3, [r7, #5]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	2301      	movs	r3, #1
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2301      	movs	r3, #1
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <PCA9538_Read_Register+0x44>)
 80017fe:	f001 f9ed 	bl	8002bdc <HAL_I2C_Mem_Read_IT>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d0ec      	beq.n	80017e6 <PCA9538_Read_Register+0x12>
			== HAL_BUSY)
		;
	return retcode;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200008e0 	.word	0x200008e0

0800181c <PCA9538_Write_Register>:

HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg,
		uint8_t *buf) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af02      	add	r7, sp, #8
 8001822:	4603      	mov	r3, r0
 8001824:	603a      	str	r2, [r7, #0]
 8001826:	80fb      	strh	r3, [r7, #6]
 8001828:	460b      	mov	r3, r1
 800182a:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef retcode;
	while ((retcode = HAL_I2C_Mem_Write_IT(&hi2c1, addr & 0xFFFE, reg, 1, buf,
 800182c:	bf00      	nop
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	b299      	uxth	r1, r3
 8001836:	797b      	ldrb	r3, [r7, #5]
 8001838:	b29a      	uxth	r2, r3
 800183a:	2301      	movs	r3, #1
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2301      	movs	r3, #1
 8001844:	4806      	ldr	r0, [pc, #24]	; (8001860 <PCA9538_Write_Register+0x44>)
 8001846:	f001 f917 	bl	8002a78 <HAL_I2C_Mem_Write_IT>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d0ec      	beq.n	800182e <PCA9538_Write_Register+0x12>
			1)) == HAL_BUSY)
		;
	return retcode;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200008e0 	.word	0x200008e0

08001864 <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t *buf) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ffac 	bl	80017d4 <PCA9538_Read_Register>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7fe fc9d 	bl	80001d0 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	b29a      	uxth	r2, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <UART_Transmit+0x28>)
 80018a2:	f004 fca2 	bl	80061ea <HAL_UART_Transmit>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000ae8 	.word	0x20000ae8

080018b4 <sound_driver_init>:

#include "sound_driver.h"
#include "tim.h"
#include "hal_driver.h"

void sound_driver_init(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
    HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 80018b8:	2100      	movs	r1, #0
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <sound_driver_init+0x18>)
 80018bc:	f003 fe2e 	bl	800551c <HAL_TIM_OC_Start>
    HAL_TIM_PWM_Init(&htim2);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <sound_driver_init+0x18>)
 80018c2:	f003 fef3 	bl	80056ac <HAL_TIM_PWM_Init>
};
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000aa0 	.word	0x20000aa0

080018d0 <sound_driver_volume_mute>:

void sound_driver_volume_on() {
    TIM2->CCR1 = 10;
};

void sound_driver_volume_mute() {
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
    TIM2->CCR1 = 0;
 80018d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d8:	2200      	movs	r2, #0
 80018da:	635a      	str	r2, [r3, #52]	; 0x34
};
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <HAL_MspInit+0x4c>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_MspInit+0x4c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800193c:	e7fe      	b.n	800193c <NMI_Handler+0x4>

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 fa76 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <I2C1_EV_IRQHandler+0x10>)
 8001992:	f001 f9e1 	bl	8002d58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200008e0 	.word	0x200008e0

080019a0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <I2C1_ER_IRQHandler+0x10>)
 80019a6:	f001 fb48 	bl	800303a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200008e0 	.word	0x200008e0

080019b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <TIM6_DAC_IRQHandler+0x10>)
 80019ba:	f003 fec6 	bl	800574a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000a58 	.word	0x20000a58

080019c8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <USART6_IRQHandler+0x10>)
 80019ce:	f004 fc9f 	bl	8006310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000ae8 	.word	0x20000ae8

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f005 fb08 	bl	8007020 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20020000 	.word	0x20020000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	200008d4 	.word	0x200008d4
 8001a44:	20000b40 	.word	0x20000b40

08001a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <MX_TIM2_Init+0xac>)
 8001a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <MX_TIM2_Init+0xac>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <MX_TIM2_Init+0xac>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_TIM2_Init+0xac>)
 8001aa4:	220a      	movs	r2, #10
 8001aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_TIM2_Init+0xac>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_TIM2_Init+0xac>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ab4:	4818      	ldr	r0, [pc, #96]	; (8001b18 <MX_TIM2_Init+0xac>)
 8001ab6:	f003 fdf9 	bl	80056ac <HAL_TIM_PWM_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ac0:	f7ff fc8c 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <MX_TIM2_Init+0xac>)
 8001ad4:	f004 faac 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001ade:	f7ff fc7d 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae2:	2360      	movs	r3, #96	; 0x60
 8001ae4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2200      	movs	r2, #0
 8001af6:	4619      	mov	r1, r3
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <MX_TIM2_Init+0xac>)
 8001afa:	f003 ff2f 	bl	800595c <HAL_TIM_PWM_ConfigChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b04:	f7ff fc6a 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b08:	4803      	ldr	r0, [pc, #12]	; (8001b18 <MX_TIM2_Init+0xac>)
 8001b0a:	f000 f885 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000aa0 	.word	0x20000aa0

08001b1c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b22:	463b      	mov	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_TIM6_Init+0x64>)
 8001b2c:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <MX_TIM6_Init+0x68>)
 8001b2e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000;
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <MX_TIM6_Init+0x64>)
 8001b32:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001b36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_TIM6_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <MX_TIM6_Init+0x64>)
 8001b40:	2264      	movs	r2, #100	; 0x64
 8001b42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_TIM6_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_TIM6_Init+0x64>)
 8001b4c:	f003 fc26 	bl	800539c <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001b56:	f7ff fc41 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b62:	463b      	mov	r3, r7
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <MX_TIM6_Init+0x64>)
 8001b68:	f004 fa62 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001b72:	f7ff fc33 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000a58 	.word	0x20000a58
 8001b84:	40001000 	.word	0x40001000

08001b88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b98:	d10d      	bne.n	8001bb6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <HAL_TIM_Base_MspInit+0x48>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d115      	bne.n	8001c06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_TIM_Base_MspInit+0x4c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <HAL_TIM_Base_MspInit+0x4c>)
 8001be4:	f043 0310 	orr.w	r3, r3, #16
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_TIM_Base_MspInit+0x4c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2036      	movs	r0, #54	; 0x36
 8001bfc:	f000 fa59 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c00:	2036      	movs	r0, #54	; 0x36
 8001c02:	f000 fa72 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40001000 	.word	0x40001000
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c38:	d11d      	bne.n	8001c76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_TIM_MspPostInit+0x68>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_TIM_MspPostInit+0x68>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_TIM_MspPostInit+0x68>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c56:	2320      	movs	r3, #32
 8001c58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <HAL_TIM_MspPostInit+0x6c>)
 8001c72:	f000 faf5 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000

08001c88 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <MX_USART6_UART_Init+0x50>)
 8001c90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001cc0:	f004 fa46 	bl	8006150 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001cca:	f7ff fb87 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000ae8 	.word	0x20000ae8
 8001cd8:	40011400 	.word	0x40011400

08001cdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_UART_MspInit+0x94>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d133      	bne.n	8001d66 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d08:	f043 0320 	orr.w	r3, r3, #32
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d36:	23c0      	movs	r3, #192	; 0xc0
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d46:	2308      	movs	r3, #8
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4809      	ldr	r0, [pc, #36]	; (8001d78 <HAL_UART_MspInit+0x9c>)
 8001d52:	f000 fa85 	bl	8002260 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2047      	movs	r0, #71	; 0x47
 8001d5c:	f000 f9a9 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d60:	2047      	movs	r0, #71	; 0x47
 8001d62:	f000 f9c2 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40011400 	.word	0x40011400
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020800 	.word	0x40020800

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d82:	490e      	ldr	r1, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d84:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d98:	4c0b      	ldr	r4, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001da6:	f7ff fe4f 	bl	8001a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f005 f93f 	bl	800702c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7ff f9cf 	bl	8001150 <main>
  bx  lr    
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	200003d8 	.word	0x200003d8
  ldr r2, =_sidata
 8001dc0:	0800847c 	.word	0x0800847c
  ldr r2, =_sbss
 8001dc4:	200003d8 	.word	0x200003d8
  ldr r4, =_ebss
 8001dc8:	20000b40 	.word	0x20000b40

08001dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_Init+0x40>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_Init+0x40>)
 8001de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_Init+0x40>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 f94f 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	200f      	movs	r0, #15
 8001e00:	f000 f808 	bl	8001e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff fd70 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x54>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_InitTick+0x58>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f967 	bl	8002106 <HAL_SYSTICK_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00e      	b.n	8001e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d80a      	bhi.n	8001e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f000 f92f 	bl	80020b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e54:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <HAL_InitTick+0x5c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000368 	.word	0x20000368
 8001e6c:	20000370 	.word	0x20000370
 8001e70:	2000036c 	.word	0x2000036c

08001e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x20>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x24>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_IncTick+0x24>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000370 	.word	0x20000370
 8001e98:	20000b2c 	.word	0x20000b2c

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000b2c 	.word	0x20000b2c

08001eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff ffee 	bl	8001e9c <HAL_GetTick>
 8001ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d005      	beq.n	8001eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_Delay+0x44>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eda:	bf00      	nop
 8001edc:	f7ff ffde 	bl	8001e9c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d8f7      	bhi.n	8001edc <HAL_Delay+0x28>
  {
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000370 	.word	0x20000370

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <__NVIC_EnableIRQ+0x38>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff8e 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff29 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff3e 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff8e 	bl	8001ff0 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5d 	bl	8001f9c <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff31 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffa2 	bl	8002058 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff feb6 	bl	8001e9c <HAL_GetTick>
 8002130:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d008      	beq.n	8002150 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e052      	b.n	80021f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0216 	bic.w	r2, r2, #22
 800215e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800216e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d103      	bne.n	8002180 <HAL_DMA_Abort+0x62>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0208 	bic.w	r2, r2, #8
 800218e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a0:	e013      	b.n	80021ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a2:	f7ff fe7b 	bl	8001e9c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d90c      	bls.n	80021ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e015      	b.n	80021f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e4      	bne.n	80021a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	223f      	movs	r2, #63	; 0x3f
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d004      	beq.n	800221c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e00c      	b.n	8002236 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2205      	movs	r2, #5
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002250:	b2db      	uxtb	r3, r3
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	e16b      	b.n	8002554 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	f040 815a 	bne.w	800254e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d005      	beq.n	80022b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d130      	bne.n	8002314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e8:	2201      	movs	r2, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 0201 	and.w	r2, r3, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b03      	cmp	r3, #3
 800231e:	d017      	beq.n	8002350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d123      	bne.n	80023a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	220f      	movs	r2, #15
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80b4 	beq.w	800254e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b60      	ldr	r3, [pc, #384]	; (800256c <HAL_GPIO_Init+0x30c>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a5f      	ldr	r2, [pc, #380]	; (800256c <HAL_GPIO_Init+0x30c>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_GPIO_Init+0x30c>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002402:	4a5b      	ldr	r2, [pc, #364]	; (8002570 <HAL_GPIO_Init+0x310>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a52      	ldr	r2, [pc, #328]	; (8002574 <HAL_GPIO_Init+0x314>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d02b      	beq.n	8002486 <HAL_GPIO_Init+0x226>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a51      	ldr	r2, [pc, #324]	; (8002578 <HAL_GPIO_Init+0x318>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d025      	beq.n	8002482 <HAL_GPIO_Init+0x222>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a50      	ldr	r2, [pc, #320]	; (800257c <HAL_GPIO_Init+0x31c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01f      	beq.n	800247e <HAL_GPIO_Init+0x21e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4f      	ldr	r2, [pc, #316]	; (8002580 <HAL_GPIO_Init+0x320>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d019      	beq.n	800247a <HAL_GPIO_Init+0x21a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4e      	ldr	r2, [pc, #312]	; (8002584 <HAL_GPIO_Init+0x324>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_GPIO_Init+0x216>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4d      	ldr	r2, [pc, #308]	; (8002588 <HAL_GPIO_Init+0x328>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00d      	beq.n	8002472 <HAL_GPIO_Init+0x212>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4c      	ldr	r2, [pc, #304]	; (800258c <HAL_GPIO_Init+0x32c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0x20e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4b      	ldr	r2, [pc, #300]	; (8002590 <HAL_GPIO_Init+0x330>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_GPIO_Init+0x20a>
 8002466:	2307      	movs	r3, #7
 8002468:	e00e      	b.n	8002488 <HAL_GPIO_Init+0x228>
 800246a:	2308      	movs	r3, #8
 800246c:	e00c      	b.n	8002488 <HAL_GPIO_Init+0x228>
 800246e:	2306      	movs	r3, #6
 8002470:	e00a      	b.n	8002488 <HAL_GPIO_Init+0x228>
 8002472:	2305      	movs	r3, #5
 8002474:	e008      	b.n	8002488 <HAL_GPIO_Init+0x228>
 8002476:	2304      	movs	r3, #4
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x228>
 800247a:	2303      	movs	r3, #3
 800247c:	e004      	b.n	8002488 <HAL_GPIO_Init+0x228>
 800247e:	2302      	movs	r3, #2
 8002480:	e002      	b.n	8002488 <HAL_GPIO_Init+0x228>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_GPIO_Init+0x228>
 8002486:	2300      	movs	r3, #0
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	f002 0203 	and.w	r2, r2, #3
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	4093      	lsls	r3, r2
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002498:	4935      	ldr	r1, [pc, #212]	; (8002570 <HAL_GPIO_Init+0x310>)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_GPIO_Init+0x334>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ca:	4a32      	ldr	r2, [pc, #200]	; (8002594 <HAL_GPIO_Init+0x334>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024d0:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_GPIO_Init+0x334>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f4:	4a27      	ldr	r2, [pc, #156]	; (8002594 <HAL_GPIO_Init+0x334>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_GPIO_Init+0x334>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800251e:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <HAL_GPIO_Init+0x334>)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_GPIO_Init+0x334>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002548:	4a12      	ldr	r2, [pc, #72]	; (8002594 <HAL_GPIO_Init+0x334>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b0f      	cmp	r3, #15
 8002558:	f67f ae90 	bls.w	800227c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	40013800 	.word	0x40013800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020400 	.word	0x40020400
 800257c:	40020800 	.word	0x40020800
 8002580:	40020c00 	.word	0x40020c00
 8002584:	40021000 	.word	0x40021000
 8002588:	40021400 	.word	0x40021400
 800258c:	40021800 	.word	0x40021800
 8002590:	40021c00 	.word	0x40021c00
 8002594:	40013c00 	.word	0x40013c00

08002598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e001      	b.n	80025ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e12b      	b.n	8002866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe f868 	bl	80006f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002660:	f002 fe74 	bl	800534c <HAL_RCC_GetPCLK1Freq>
 8002664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a81      	ldr	r2, [pc, #516]	; (8002870 <HAL_I2C_Init+0x274>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d807      	bhi.n	8002680 <HAL_I2C_Init+0x84>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a80      	ldr	r2, [pc, #512]	; (8002874 <HAL_I2C_Init+0x278>)
 8002674:	4293      	cmp	r3, r2
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e006      	b.n	800268e <HAL_I2C_Init+0x92>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a7d      	ldr	r2, [pc, #500]	; (8002878 <HAL_I2C_Init+0x27c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	bf94      	ite	ls
 8002688:	2301      	movls	r3, #1
 800268a:	2300      	movhi	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0e7      	b.n	8002866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a78      	ldr	r2, [pc, #480]	; (800287c <HAL_I2C_Init+0x280>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9b      	lsrs	r3, r3, #18
 80026a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HAL_I2C_Init+0x274>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d802      	bhi.n	80026d0 <HAL_I2C_Init+0xd4>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3301      	adds	r3, #1
 80026ce:	e009      	b.n	80026e4 <HAL_I2C_Init+0xe8>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	4a69      	ldr	r2, [pc, #420]	; (8002880 <HAL_I2C_Init+0x284>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	3301      	adds	r3, #1
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	495c      	ldr	r1, [pc, #368]	; (8002870 <HAL_I2C_Init+0x274>)
 8002700:	428b      	cmp	r3, r1
 8002702:	d819      	bhi.n	8002738 <HAL_I2C_Init+0x13c>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e59      	subs	r1, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002712:	1c59      	adds	r1, r3, #1
 8002714:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002718:	400b      	ands	r3, r1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_I2C_Init+0x138>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e59      	subs	r1, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fbb1 f3f3 	udiv	r3, r1, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002732:	e051      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002734:	2304      	movs	r3, #4
 8002736:	e04f      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <HAL_I2C_Init+0x168>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e58      	subs	r0, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	440b      	add	r3, r1
 800274e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e012      	b.n	800278a <HAL_I2C_Init+0x18e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e58      	subs	r0, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	0099      	lsls	r1, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Init+0x196>
 800278e:	2301      	movs	r3, #1
 8002790:	e022      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10e      	bne.n	80027b8 <HAL_I2C_Init+0x1bc>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1e58      	subs	r0, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	440b      	add	r3, r1
 80027a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b6:	e00f      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	0099      	lsls	r1, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	6809      	ldr	r1, [r1, #0]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6911      	ldr	r1, [r2, #16]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68d2      	ldr	r2, [r2, #12]
 8002812:	4311      	orrs	r1, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	430b      	orrs	r3, r1
 800281a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	000186a0 	.word	0x000186a0
 8002874:	001e847f 	.word	0x001e847f
 8002878:	003d08ff 	.word	0x003d08ff
 800287c:	431bde83 	.word	0x431bde83
 8002880:	10624dd3 	.word	0x10624dd3

08002884 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	460b      	mov	r3, r1
 8002898:	813b      	strh	r3, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800289e:	f7ff fafd 	bl	8001e9c <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	f040 80d9 	bne.w	8002a64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2319      	movs	r3, #25
 80028b8:	2201      	movs	r2, #1
 80028ba:	496d      	ldr	r1, [pc, #436]	; (8002a70 <HAL_I2C_Mem_Write+0x1ec>)
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f001 ff51 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0cc      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Mem_Write+0x56>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0c5      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d007      	beq.n	8002900 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2221      	movs	r2, #33	; 0x21
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2240      	movs	r2, #64	; 0x40
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a3a      	ldr	r2, [r7, #32]
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a4d      	ldr	r2, [pc, #308]	; (8002a74 <HAL_I2C_Mem_Write+0x1f0>)
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002942:	88f8      	ldrh	r0, [r7, #6]
 8002944:	893a      	ldrh	r2, [r7, #8]
 8002946:	8979      	ldrh	r1, [r7, #10]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	4603      	mov	r3, r0
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f001 fdc8 	bl	80044e8 <I2C_RequestMemoryWrite>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d052      	beq.n	8002a04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e081      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f001 ffd2 	bl	8004910 <I2C_WaitOnTXEFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b04      	cmp	r3, #4
 8002978:	d107      	bne.n	800298a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002988:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06b      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d11b      	bne.n	8002a04 <HAL_I2C_Mem_Write+0x180>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d017      	beq.n	8002a04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1aa      	bne.n	8002962 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f001 ffbe 	bl	8004992 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d107      	bne.n	8002a34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e016      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	00100002 	.word	0x00100002
 8002a74:	ffff0000 	.word	0xffff0000

08002a78 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	813b      	strh	r3, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	f040 808e 	bne.w	8002bc0 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002aa4:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <HAL_I2C_Mem_Write_IT+0x158>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	08db      	lsrs	r3, r3, #3
 8002aaa:	4a4a      	ldr	r2, [pc, #296]	; (8002bd4 <HAL_I2C_Mem_Write_IT+0x15c>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	0a1a      	lsrs	r2, r3, #8
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009a      	lsls	r2, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e064      	b.n	8002bc2 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d0db      	beq.n	8002abe <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_I2C_Mem_Write_IT+0x9c>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e056      	b.n	8002bc2 <HAL_I2C_Mem_Write_IT+0x14a>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d007      	beq.n	8002b3a <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b48:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2221      	movs	r2, #33	; 0x21
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2240      	movs	r2, #64	; 0x40
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a3a      	ldr	r2, [r7, #32]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <HAL_I2C_Mem_Write_IT+0x160>)
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002b7c:	897a      	ldrh	r2, [r7, #10]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002b82:	893a      	ldrh	r2, [r7, #8]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002bba:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
  }
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000368 	.word	0x20000368
 8002bd4:	14f8b589 	.word	0x14f8b589
 8002bd8:	ffff0000 	.word	0xffff0000

08002bdc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	461a      	mov	r2, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	817b      	strh	r3, [r7, #10]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	813b      	strh	r3, [r7, #8]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	f040 809a 	bne.w	8002d3c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_I2C_Mem_Read_IT+0x170>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <HAL_I2C_Mem_Read_IT+0x174>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	0a1a      	lsrs	r2, r3, #8
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009a      	lsls	r2, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d116      	bne.n	8002c5c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e070      	b.n	8002d3e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d0db      	beq.n	8002c22 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_I2C_Mem_Read_IT+0x9c>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e062      	b.n	8002d3e <HAL_I2C_Mem_Read_IT+0x162>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d007      	beq.n	8002c9e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2222      	movs	r2, #34	; 0x22
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2240      	movs	r2, #64	; 0x40
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a3a      	ldr	r2, [r7, #32]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_I2C_Mem_Read_IT+0x178>)
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002ce0:	897a      	ldrh	r2, [r7, #10]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002ce6:	893a      	ldrh	r2, [r7, #8]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d06:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d16:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002d36:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000368 	.word	0x20000368
 8002d50:	14f8b589 	.word	0x14f8b589
 8002d54:	ffff0000 	.word	0xffff0000

08002d58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d003      	beq.n	8002d90 <HAL_I2C_EV_IRQHandler+0x38>
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	f040 80c1 	bne.w	8002f12 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10d      	bne.n	8002dc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002db0:	d003      	beq.n	8002dba <HAL_I2C_EV_IRQHandler+0x62>
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_EV_IRQHandler+0x66>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x68>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	f000 8132 	beq.w	800302a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00c      	beq.n	8002dea <HAL_I2C_EV_IRQHandler+0x92>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	0a5b      	lsrs	r3, r3, #9
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d006      	beq.n	8002dea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f001 fe7a 	bl	8004ad6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fd65 	bl	80038b2 <I2C_Master_SB>
 8002de8:	e092      	b.n	8002f10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	08db      	lsrs	r3, r3, #3
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0xb2>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	0a5b      	lsrs	r3, r3, #9
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fddb 	bl	80039be <I2C_Master_ADD10>
 8002e08:	e082      	b.n	8002f10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_I2C_EV_IRQHandler+0xd2>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	0a5b      	lsrs	r3, r3, #9
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fdf5 	bl	8003a12 <I2C_Master_ADDR>
 8002e28:	e072      	b.n	8002f10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d03b      	beq.n	8002eae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e44:	f000 80f3 	beq.w	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	09db      	lsrs	r3, r3, #7
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00f      	beq.n	8002e74 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9df 	bl	8003230 <I2C_MasterTransmit_TXE>
 8002e72:	e04d      	b.n	8002f10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80d6 	beq.w	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	0a5b      	lsrs	r3, r3, #9
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80cf 	beq.w	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e90:	7bbb      	ldrb	r3, [r7, #14]
 8002e92:	2b21      	cmp	r3, #33	; 0x21
 8002e94:	d103      	bne.n	8002e9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa66 	bl	8003368 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e9c:	e0c7      	b.n	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	f040 80c4 	bne.w	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fad4 	bl	8003454 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eac:	e0bf      	b.n	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ebc:	f000 80b7 	beq.w	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	099b      	lsrs	r3, r3, #6
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00f      	beq.n	8002eec <HAL_I2C_EV_IRQHandler+0x194>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	0a9b      	lsrs	r3, r3, #10
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <HAL_I2C_EV_IRQHandler+0x194>
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d103      	bne.n	8002eec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fb49 	bl	800357c <I2C_MasterReceive_RXNE>
 8002eea:	e011      	b.n	8002f10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 809a 	beq.w	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	0a5b      	lsrs	r3, r3, #9
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8093 	beq.w	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fbe8 	bl	80036de <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f0e:	e08e      	b.n	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f10:	e08d      	b.n	800302e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e007      	b.n	8002f34 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d012      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x20e>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	0a5b      	lsrs	r3, r3, #9
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00c      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f5c:	69b9      	ldr	r1, [r7, #24]
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 ffa6 	bl	8003eb0 <I2C_Slave_ADDR>
 8002f64:	e066      	b.n	8003034 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_I2C_EV_IRQHandler+0x22e>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	0a5b      	lsrs	r3, r3, #9
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 ffe0 	bl	8003f44 <I2C_Slave_STOPF>
 8002f84:	e056      	b.n	8003034 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f86:	7bbb      	ldrb	r3, [r7, #14]
 8002f88:	2b21      	cmp	r3, #33	; 0x21
 8002f8a:	d002      	beq.n	8002f92 <HAL_I2C_EV_IRQHandler+0x23a>
 8002f8c:	7bbb      	ldrb	r3, [r7, #14]
 8002f8e:	2b29      	cmp	r3, #41	; 0x29
 8002f90:	d125      	bne.n	8002fde <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	09db      	lsrs	r3, r3, #7
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00f      	beq.n	8002fbe <HAL_I2C_EV_IRQHandler+0x266>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	0a9b      	lsrs	r3, r3, #10
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_I2C_EV_IRQHandler+0x266>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d103      	bne.n	8002fbe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 febc 	bl	8003d34 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fbc:	e039      	b.n	8003032 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d033      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0x2da>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	0a5b      	lsrs	r3, r3, #9
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d02d      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fee9 	bl	8003dae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fdc:	e029      	b.n	8003032 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00f      	beq.n	800300a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	0a9b      	lsrs	r3, r3, #10
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fef4 	bl	8003df0 <I2C_SlaveReceive_RXNE>
 8003008:	e014      	b.n	8003034 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00e      	beq.n	8003034 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	0a5b      	lsrs	r3, r3, #9
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 ff22 	bl	8003e6c <I2C_SlaveReceive_BTF>
 8003028:	e004      	b.n	8003034 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003032:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b08a      	sub	sp, #40	; 0x28
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800305c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00e      	beq.n	8003088 <HAL_I2C_ER_IRQHandler+0x4e>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003086:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	0a5b      	lsrs	r3, r3, #9
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <HAL_I2C_ER_IRQHandler+0x78>
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	f043 0302 	orr.w	r3, r3, #2
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80030b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	0a9b      	lsrs	r3, r3, #10
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d03f      	beq.n	800313e <HAL_I2C_ER_IRQHandler+0x104>
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d039      	beq.n	800313e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80030ca:	7efb      	ldrb	r3, [r7, #27]
 80030cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80030e4:	7ebb      	ldrb	r3, [r7, #26]
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d112      	bne.n	8003110 <HAL_I2C_ER_IRQHandler+0xd6>
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10f      	bne.n	8003110 <HAL_I2C_ER_IRQHandler+0xd6>
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	2b21      	cmp	r3, #33	; 0x21
 80030f4:	d008      	beq.n	8003108 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	2b29      	cmp	r3, #41	; 0x29
 80030fa:	d005      	beq.n	8003108 <HAL_I2C_ER_IRQHandler+0xce>
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	2b28      	cmp	r3, #40	; 0x28
 8003100:	d106      	bne.n	8003110 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b21      	cmp	r3, #33	; 0x21
 8003106:	d103      	bne.n	8003110 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f001 f84b 	bl	80041a4 <I2C_Slave_AF>
 800310e:	e016      	b.n	800313e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003118:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003122:	7efb      	ldrb	r3, [r7, #27]
 8003124:	2b10      	cmp	r3, #16
 8003126:	d002      	beq.n	800312e <HAL_I2C_ER_IRQHandler+0xf4>
 8003128:	7efb      	ldrb	r3, [r7, #27]
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d107      	bne.n	800313e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	0adb      	lsrs	r3, r3, #11
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00e      	beq.n	8003168 <HAL_I2C_ER_IRQHandler+0x12e>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	f043 0308 	orr.w	r3, r3, #8
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003166:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f001 f882 	bl	8004284 <I2C_ITError>
  }
}
 8003180:	bf00      	nop
 8003182:	3728      	adds	r7, #40	; 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
 80031e4:	4613      	mov	r3, r2
 80031e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003246:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d150      	bne.n	80032f8 <I2C_MasterTransmit_TXE+0xc8>
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	2b21      	cmp	r3, #33	; 0x21
 800325a:	d14d      	bne.n	80032f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b08      	cmp	r3, #8
 8003260:	d01d      	beq.n	800329e <I2C_MasterTransmit_TXE+0x6e>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b20      	cmp	r3, #32
 8003266:	d01a      	beq.n	800329e <I2C_MasterTransmit_TXE+0x6e>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800326e:	d016      	beq.n	800329e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800327e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2211      	movs	r2, #17
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ff76 	bl	8003188 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800329c:	e060      	b.n	8003360 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b40      	cmp	r3, #64	; 0x40
 80032d6:	d107      	bne.n	80032e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7fd fef3 	bl	80010cc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032e6:	e03b      	b.n	8003360 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff49 	bl	8003188 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032f6:	e033      	b.n	8003360 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b21      	cmp	r3, #33	; 0x21
 80032fc:	d005      	beq.n	800330a <I2C_MasterTransmit_TXE+0xda>
 80032fe:	7bbb      	ldrb	r3, [r7, #14]
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d12d      	bne.n	8003360 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b22      	cmp	r3, #34	; 0x22
 8003308:	d12a      	bne.n	8003360 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d108      	bne.n	8003326 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003322:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003324:	e01c      	b.n	8003360 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	d103      	bne.n	800333a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f88e 	bl	8003454 <I2C_MemoryTransmit_TXE_BTF>
}
 8003338:	e012      	b.n	8003360 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800335e:	e7ff      	b.n	8003360 <I2C_MasterTransmit_TXE+0x130>
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b21      	cmp	r3, #33	; 0x21
 8003380:	d164      	bne.n	800344c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d012      	beq.n	80033b2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	781a      	ldrb	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80033b0:	e04c      	b.n	800344c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d01d      	beq.n	80033f4 <I2C_MasterTransmit_BTF+0x8c>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d01a      	beq.n	80033f4 <I2C_MasterTransmit_BTF+0x8c>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c4:	d016      	beq.n	80033f4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033d4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2211      	movs	r2, #17
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff fecb 	bl	8003188 <HAL_I2C_MasterTxCpltCallback>
}
 80033f2:	e02b      	b.n	800344c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003402:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003412:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d107      	bne.n	800343e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fe48 	bl	80010cc <HAL_I2C_MemTxCpltCallback>
}
 800343c:	e006      	b.n	800344c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fe9e 	bl	8003188 <HAL_I2C_MasterTxCpltCallback>
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003462:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003468:	2b00      	cmp	r3, #0
 800346a:	d11d      	bne.n	80034a8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10b      	bne.n	800348c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003478:	b2da      	uxtb	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003484:	1c9a      	adds	r2, r3, #2
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800348a:	e073      	b.n	8003574 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003490:	b29b      	uxth	r3, r3
 8003492:	121b      	asrs	r3, r3, #8
 8003494:	b2da      	uxtb	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034a6:	e065      	b.n	8003574 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10b      	bne.n	80034c8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034c6:	e055      	b.n	8003574 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d151      	bne.n	8003574 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b22      	cmp	r3, #34	; 0x22
 80034d4:	d10d      	bne.n	80034f2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034f0:	e040      	b.n	8003574 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d015      	beq.n	8003528 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b21      	cmp	r3, #33	; 0x21
 8003500:	d112      	bne.n	8003528 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003526:	e025      	b.n	8003574 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d120      	bne.n	8003574 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b21      	cmp	r3, #33	; 0x21
 8003536:	d11d      	bne.n	8003574 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003546:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd fdac 	bl	80010cc <HAL_I2C_MemTxCpltCallback>
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b22      	cmp	r3, #34	; 0x22
 800358e:	f040 80a2 	bne.w	80036d6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d921      	bls.n	80035e4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	f040 8082 	bne.w	80036d6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80035e2:	e078      	b.n	80036d6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d074      	beq.n	80036d6 <I2C_MasterReceive_RXNE+0x15a>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d002      	beq.n	80035f8 <I2C_MasterReceive_RXNE+0x7c>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d16e      	bne.n	80036d6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f001 fa0b 	bl	8004a14 <I2C_WaitOnSTOPRequestThroughIT>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d142      	bne.n	800368a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003612:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003622:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d10a      	bne.n	8003674 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fd fd43 	bl	80010f8 <HAL_I2C_MemRxCpltCallback>
}
 8003672:	e030      	b.n	80036d6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2212      	movs	r2, #18
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff fd8a 	bl	800319c <HAL_I2C_MasterRxCpltCallback>
}
 8003688:	e025      	b.n	80036d6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003698:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fd99 	bl	8003208 <HAL_I2C_ErrorCallback>
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d11b      	bne.n	800372e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003704:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800372c:	e0bd      	b.n	80038aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b03      	cmp	r3, #3
 8003736:	d129      	bne.n	800378c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b04      	cmp	r3, #4
 800374c:	d00a      	beq.n	8003764 <I2C_MasterReceive_BTF+0x86>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d007      	beq.n	8003764 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003762:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800378a:	e08e      	b.n	80038aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d176      	bne.n	8003884 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d002      	beq.n	80037a2 <I2C_MasterReceive_BTF+0xc4>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d108      	bne.n	80037b4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e019      	b.n	80037e8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d002      	beq.n	80037c0 <I2C_MasterReceive_BTF+0xe2>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d108      	bne.n	80037d2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e00a      	b.n	80037e8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d007      	beq.n	80037e8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003842:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d10a      	bne.n	800386e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fc46 	bl	80010f8 <HAL_I2C_MemRxCpltCallback>
}
 800386c:	e01d      	b.n	80038aa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2212      	movs	r2, #18
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff fc8d 	bl	800319c <HAL_I2C_MasterRxCpltCallback>
}
 8003882:	e012      	b.n	80038aa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d117      	bne.n	80038f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80038e0:	e067      	b.n	80039b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]
}
 80038f4:	e05d      	b.n	80039b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038fe:	d133      	bne.n	8003968 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b21      	cmp	r3, #33	; 0x21
 800390a:	d109      	bne.n	8003920 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800391c:	611a      	str	r2, [r3, #16]
 800391e:	e008      	b.n	8003932 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	b2da      	uxtb	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003936:	2b00      	cmp	r3, #0
 8003938:	d004      	beq.n	8003944 <I2C_Master_SB+0x92>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d108      	bne.n	8003956 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d032      	beq.n	80039b2 <I2C_Master_SB+0x100>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d02d      	beq.n	80039b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003964:	605a      	str	r2, [r3, #4]
}
 8003966:	e024      	b.n	80039b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10e      	bne.n	800398e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003974:	b29b      	uxth	r3, r3
 8003976:	11db      	asrs	r3, r3, #7
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 0306 	and.w	r3, r3, #6
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f063 030f 	orn	r3, r3, #15
 8003984:	b2da      	uxtb	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]
}
 800398c:	e011      	b.n	80039b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10d      	bne.n	80039b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	b29b      	uxth	r3, r3
 800399c:	11db      	asrs	r3, r3, #7
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f003 0306 	and.w	r3, r3, #6
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f063 030e 	orn	r3, r3, #14
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	611a      	str	r2, [r3, #16]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <I2C_Master_ADD10+0x26>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d108      	bne.n	80039f6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00c      	beq.n	8003a06 <I2C_Master_ADD10+0x48>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a04:	605a      	str	r2, [r3, #4]
  }
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b091      	sub	sp, #68	; 0x44
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b22      	cmp	r3, #34	; 0x22
 8003a3a:	f040 8169 	bne.w	8003d10 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10f      	bne.n	8003a66 <I2C_Master_ADDR+0x54>
 8003a46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d10b      	bne.n	8003a66 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	e160      	b.n	8003d28 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11d      	bne.n	8003aaa <I2C_Master_ADDR+0x98>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a76:	d118      	bne.n	8003aaa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	651a      	str	r2, [r3, #80]	; 0x50
 8003aa8:	e13e      	b.n	8003d28 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d113      	bne.n	8003adc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e115      	b.n	8003d08 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	f040 808a 	bne.w	8003bfc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aee:	d137      	bne.n	8003b60 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0e:	d113      	bne.n	8003b38 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b20:	2300      	movs	r3, #0
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	e0e7      	b.n	8003d08 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e0d3      	b.n	8003d08 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d02e      	beq.n	8003bc4 <I2C_Master_ADDR+0x1b2>
 8003b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d02b      	beq.n	8003bc4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	2b12      	cmp	r3, #18
 8003b70:	d102      	bne.n	8003b78 <I2C_Master_ADDR+0x166>
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d125      	bne.n	8003bc4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d00e      	beq.n	8003b9c <I2C_Master_ADDR+0x18a>
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d00b      	beq.n	8003b9c <I2C_Master_ADDR+0x18a>
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d008      	beq.n	8003b9c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	e007      	b.n	8003bac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003baa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	e0a1      	b.n	8003d08 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e085      	b.n	8003d08 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d14d      	bne.n	8003ca2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d016      	beq.n	8003c3a <I2C_Master_ADDR+0x228>
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d013      	beq.n	8003c3a <I2C_Master_ADDR+0x228>
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d010      	beq.n	8003c3a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c26:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e007      	b.n	8003c4a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c48:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c58:	d117      	bne.n	8003c8a <I2C_Master_ADDR+0x278>
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c60:	d00b      	beq.n	8003c7a <I2C_Master_ADDR+0x268>
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d008      	beq.n	8003c7a <I2C_Master_ADDR+0x268>
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d005      	beq.n	8003c7a <I2C_Master_ADDR+0x268>
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d002      	beq.n	8003c7a <I2C_Master_ADDR+0x268>
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d107      	bne.n	8003c8a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c88:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	e032      	b.n	8003d08 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc0:	d117      	bne.n	8003cf2 <I2C_Master_ADDR+0x2e0>
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cc8:	d00b      	beq.n	8003ce2 <I2C_Master_ADDR+0x2d0>
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d008      	beq.n	8003ce2 <I2C_Master_ADDR+0x2d0>
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d005      	beq.n	8003ce2 <I2C_Master_ADDR+0x2d0>
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d002      	beq.n	8003ce2 <I2C_Master_ADDR+0x2d0>
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d107      	bne.n	8003cf2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cf0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d0e:	e00b      	b.n	8003d28 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
}
 8003d26:	e7ff      	b.n	8003d28 <I2C_Master_ADDR+0x316>
 8003d28:	bf00      	nop
 8003d2a:	3744      	adds	r7, #68	; 0x44
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d02b      	beq.n	8003da6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	781a      	ldrb	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d114      	bne.n	8003da6 <I2C_SlaveTransmit_TXE+0x72>
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b29      	cmp	r3, #41	; 0x29
 8003d80:	d111      	bne.n	8003da6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d90:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2221      	movs	r2, #33	; 0x21
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2228      	movs	r2, #40	; 0x28
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fa05 	bl	80031b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d011      	beq.n	8003de4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d02c      	beq.n	8003e64 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d114      	bne.n	8003e64 <I2C_SlaveReceive_RXNE+0x74>
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3e:	d111      	bne.n	8003e64 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2222      	movs	r2, #34	; 0x22
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2228      	movs	r2, #40	; 0x28
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff f9b0 	bl	80031c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d012      	beq.n	8003ea4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003eca:	2b28      	cmp	r3, #40	; 0x28
 8003ecc:	d127      	bne.n	8003f1e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003edc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003eea:	2301      	movs	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	09db      	lsrs	r3, r3, #7
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	81bb      	strh	r3, [r7, #12]
 8003f00:	e002      	b.n	8003f08 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f10:	89ba      	ldrh	r2, [r7, #12]
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff f95e 	bl	80031d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f1c:	e00e      	b.n	8003f3c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f52:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f62:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f90:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa0:	d172      	bne.n	8004088 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b22      	cmp	r3, #34	; 0x22
 8003fa6:	d002      	beq.n	8003fae <I2C_Slave_STOPF+0x6a>
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	2b2a      	cmp	r3, #42	; 0x2a
 8003fac:	d135      	bne.n	800401a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f043 0204 	orr.w	r2, r3, #4
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe f92b 	bl	8002242 <HAL_DMA_GetState>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d049      	beq.n	8004086 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	4a69      	ldr	r2, [pc, #420]	; (800419c <I2C_Slave_STOPF+0x258>)
 8003ff8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe f8fd 	bl	80021fe <HAL_DMA_Abort_IT>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03d      	beq.n	8004086 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004014:	4610      	mov	r0, r2
 8004016:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004018:	e035      	b.n	8004086 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f043 0204 	orr.w	r2, r3, #4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe f8f5 	bl	8002242 <HAL_DMA_GetState>
 8004058:	4603      	mov	r3, r0
 800405a:	2b01      	cmp	r3, #1
 800405c:	d014      	beq.n	8004088 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004062:	4a4e      	ldr	r2, [pc, #312]	; (800419c <I2C_Slave_STOPF+0x258>)
 8004064:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe f8c7 	bl	80021fe <HAL_DMA_Abort_IT>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004080:	4610      	mov	r0, r2
 8004082:	4798      	blx	r3
 8004084:	e000      	b.n	8004088 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004086:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d03e      	beq.n	8004110 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d112      	bne.n	80040c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	d112      	bne.n	80040fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f043 0204 	orr.w	r2, r3, #4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f8b3 	bl	8004284 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800411e:	e039      	b.n	8004194 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b2a      	cmp	r3, #42	; 0x2a
 8004124:	d109      	bne.n	800413a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2228      	movs	r2, #40	; 0x28
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff f845 	bl	80031c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b28      	cmp	r3, #40	; 0x28
 8004144:	d111      	bne.n	800416a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <I2C_Slave_STOPF+0x25c>)
 800414a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff f846 	bl	80031f4 <HAL_I2C_ListenCpltCallback>
}
 8004168:	e014      	b.n	8004194 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	2b22      	cmp	r3, #34	; 0x22
 8004170:	d002      	beq.n	8004178 <I2C_Slave_STOPF+0x234>
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b22      	cmp	r3, #34	; 0x22
 8004176:	d10d      	bne.n	8004194 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff f818 	bl	80031c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	08004615 	.word	0x08004615
 80041a0:	ffff0000 	.word	0xffff0000

080041a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d002      	beq.n	80041c6 <I2C_Slave_AF+0x22>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d129      	bne.n	800421a <I2C_Slave_AF+0x76>
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b28      	cmp	r3, #40	; 0x28
 80041ca:	d126      	bne.n	800421a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <I2C_Slave_AF+0xdc>)
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fe ffee 	bl	80031f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004218:	e02e      	b.n	8004278 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	2b21      	cmp	r3, #33	; 0x21
 800421e:	d126      	bne.n	800426e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a17      	ldr	r2, [pc, #92]	; (8004280 <I2C_Slave_AF+0xdc>)
 8004224:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2221      	movs	r2, #33	; 0x21
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800424a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004254:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004264:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fe ffa2 	bl	80031b0 <HAL_I2C_SlaveTxCpltCallback>
}
 800426c:	e004      	b.n	8004278 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004276:	615a      	str	r2, [r3, #20]
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	ffff0000 	.word	0xffff0000

08004284 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004292:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800429c:	7bbb      	ldrb	r3, [r7, #14]
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d002      	beq.n	80042a8 <I2C_ITError+0x24>
 80042a2:	7bbb      	ldrb	r3, [r7, #14]
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d10a      	bne.n	80042be <I2C_ITError+0x3a>
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b22      	cmp	r3, #34	; 0x22
 80042ac:	d107      	bne.n	80042be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042c4:	2b28      	cmp	r3, #40	; 0x28
 80042c6:	d107      	bne.n	80042d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2228      	movs	r2, #40	; 0x28
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042d6:	e015      	b.n	8004304 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e6:	d00a      	beq.n	80042fe <I2C_ITError+0x7a>
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b60      	cmp	r3, #96	; 0x60
 80042ec:	d007      	beq.n	80042fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004312:	d162      	bne.n	80043da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004322:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d020      	beq.n	8004374 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	4a6a      	ldr	r2, [pc, #424]	; (80044e0 <I2C_ITError+0x25c>)
 8004338:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd ff5d 	bl	80021fe <HAL_DMA_Abort_IT>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8089 	beq.w	800445e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800436e:	4610      	mov	r0, r2
 8004370:	4798      	blx	r3
 8004372:	e074      	b.n	800445e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	4a59      	ldr	r2, [pc, #356]	; (80044e0 <I2C_ITError+0x25c>)
 800437a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	4618      	mov	r0, r3
 8004382:	f7fd ff3c 	bl	80021fe <HAL_DMA_Abort_IT>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d068      	beq.n	800445e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d10b      	bne.n	80043b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043d4:	4610      	mov	r0, r2
 80043d6:	4798      	blx	r3
 80043d8:	e041      	b.n	800445e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b60      	cmp	r3, #96	; 0x60
 80043e4:	d125      	bne.n	8004432 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	d10b      	bne.n	800441a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fe fef6 	bl	800321c <HAL_I2C_AbortCpltCallback>
 8004430:	e015      	b.n	800445e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d10b      	bne.n	8004458 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fe fed5 	bl	8003208 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10e      	bne.n	800448c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800449a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d113      	bne.n	80044d8 <I2C_ITError+0x254>
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	2b28      	cmp	r3, #40	; 0x28
 80044b4:	d110      	bne.n	80044d8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <I2C_ITError+0x260>)
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fe fe8e 	bl	80031f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	08004615 	.word	0x08004615
 80044e4:	ffff0000 	.word	0xffff0000

080044e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	461a      	mov	r2, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	817b      	strh	r3, [r7, #10]
 80044fa:	460b      	mov	r3, r1
 80044fc:	813b      	strh	r3, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004510:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	2200      	movs	r2, #0
 800451a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f920 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004538:	d103      	bne.n	8004542 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e05f      	b.n	8004606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004554:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	492d      	ldr	r1, [pc, #180]	; (8004610 <I2C_RequestMemoryWrite+0x128>)
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f958 	bl	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e04c      	b.n	8004606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	6a39      	ldr	r1, [r7, #32]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f9c2 	bl	8004910 <I2C_WaitOnTXEFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00d      	beq.n	80045ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b04      	cmp	r3, #4
 8004598:	d107      	bne.n	80045aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e02b      	b.n	8004606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d105      	bne.n	80045c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045b4:	893b      	ldrh	r3, [r7, #8]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	611a      	str	r2, [r3, #16]
 80045be:	e021      	b.n	8004604 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d0:	6a39      	ldr	r1, [r7, #32]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f99c 	bl	8004910 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00d      	beq.n	80045fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d107      	bne.n	80045f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e005      	b.n	8004606 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045fa:	893b      	ldrh	r3, [r7, #8]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	00010002 	.word	0x00010002

08004614 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800462e:	4b4b      	ldr	r3, [pc, #300]	; (800475c <I2C_DMAAbort+0x148>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	08db      	lsrs	r3, r3, #3
 8004634:	4a4a      	ldr	r2, [pc, #296]	; (8004760 <I2C_DMAAbort+0x14c>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	0a1a      	lsrs	r2, r3, #8
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	00da      	lsls	r2, r3, #3
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800465a:	e00a      	b.n	8004672 <I2C_DMAAbort+0x5e>
    }
    count--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3b01      	subs	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800466c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004670:	d0ea      	beq.n	8004648 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	2200      	movs	r2, #0
 8004680:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	2200      	movs	r2, #0
 8004690:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2200      	movs	r2, #0
 80046a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b4:	2200      	movs	r2, #0
 80046b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	2200      	movs	r2, #0
 80046c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0201 	bic.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b60      	cmp	r3, #96	; 0x60
 80046e2:	d10e      	bne.n	8004702 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f7fe fd8e 	bl	800321c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004700:	e027      	b.n	8004752 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004708:	2b28      	cmp	r3, #40	; 0x28
 800470a:	d117      	bne.n	800473c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800472a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2228      	movs	r2, #40	; 0x28
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800473a:	e007      	b.n	800474c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800474c:	6978      	ldr	r0, [r7, #20]
 800474e:	f7fe fd5b 	bl	8003208 <HAL_I2C_ErrorCallback>
}
 8004752:	bf00      	nop
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000368 	.word	0x20000368
 8004760:	14f8b589 	.word	0x14f8b589

08004764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004774:	e025      	b.n	80047c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d021      	beq.n	80047c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7fd fb8d 	bl	8001e9c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d116      	bne.n	80047c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e023      	b.n	800480a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d10d      	bne.n	80047e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	43da      	mvns	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4013      	ands	r3, r2
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bf0c      	ite	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	2300      	movne	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	e00c      	b.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	43da      	mvns	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	461a      	mov	r2, r3
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	429a      	cmp	r2, r3
 8004806:	d0b6      	beq.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004820:	e051      	b.n	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	d123      	bne.n	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004840:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800484a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f043 0204 	orr.w	r2, r3, #4
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e046      	b.n	8004908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d021      	beq.n	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004882:	f7fd fb0b 	bl	8001e9c <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	429a      	cmp	r2, r3
 8004890:	d302      	bcc.n	8004898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d116      	bne.n	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f043 0220 	orr.w	r2, r3, #32
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e020      	b.n	8004908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10c      	bne.n	80048ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	43da      	mvns	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4013      	ands	r3, r2
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bf14      	ite	ne
 80048e2:	2301      	movne	r3, #1
 80048e4:	2300      	moveq	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	e00b      	b.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	43da      	mvns	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d18d      	bne.n	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800491c:	e02d      	b.n	800497a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f8aa 	bl	8004a78 <I2C_IsAcknowledgeFailed>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e02d      	b.n	800498a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d021      	beq.n	800497a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004936:	f7fd fab1 	bl	8001e9c <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d116      	bne.n	800497a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e007      	b.n	800498a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d1ca      	bne.n	800491e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800499e:	e02d      	b.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f869 	bl	8004a78 <I2C_IsAcknowledgeFailed>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e02d      	b.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d021      	beq.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b8:	f7fd fa70 	bl	8001e9c <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d302      	bcc.n	80049ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d116      	bne.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f043 0220 	orr.w	r2, r3, #32
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e007      	b.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d1ca      	bne.n	80049a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a20:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	08db      	lsrs	r3, r3, #3
 8004a26:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	0a1a      	lsrs	r2, r3, #8
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d107      	bne.n	8004a52 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e008      	b.n	8004a64 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a60:	d0e9      	beq.n	8004a36 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	20000368 	.word	0x20000368
 8004a74:	14f8b589 	.word	0x14f8b589

08004a78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d11b      	bne.n	8004ac8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	f043 0204 	orr.w	r2, r3, #4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ae6:	d103      	bne.n	8004af0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004aee:	e007      	b.n	8004b00 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004af8:	d102      	bne.n	8004b00 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2208      	movs	r2, #8
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e264      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d075      	beq.n	8004c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b2a:	4ba3      	ldr	r3, [pc, #652]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d00c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4ba0      	ldr	r3, [pc, #640]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d112      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b42:	4b9d      	ldr	r3, [pc, #628]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4e:	d10b      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	4b99      	ldr	r3, [pc, #612]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d05b      	beq.n	8004c14 <HAL_RCC_OscConfig+0x108>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d157      	bne.n	8004c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e23f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b70:	d106      	bne.n	8004b80 <HAL_RCC_OscConfig+0x74>
 8004b72:	4b91      	ldr	r3, [pc, #580]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a90      	ldr	r2, [pc, #576]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e01d      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x98>
 8004b8a:	4b8b      	ldr	r3, [pc, #556]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a8a      	ldr	r2, [pc, #552]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a87      	ldr	r2, [pc, #540]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e00b      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
 8004ba4:	4b84      	ldr	r3, [pc, #528]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a83      	ldr	r2, [pc, #524]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	4b81      	ldr	r3, [pc, #516]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a80      	ldr	r2, [pc, #512]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d013      	beq.n	8004bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fd f96a 	bl	8001e9c <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fd f966 	bl	8001e9c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e204      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bde:	4b76      	ldr	r3, [pc, #472]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0xc0>
 8004bea:	e014      	b.n	8004c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fd f956 	bl	8001e9c <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7fd f952 	bl	8001e9c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e1f0      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c06:	4b6c      	ldr	r3, [pc, #432]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0xe8>
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d063      	beq.n	8004cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c22:	4b65      	ldr	r3, [pc, #404]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b62      	ldr	r3, [pc, #392]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d11c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3a:	4b5f      	ldr	r3, [pc, #380]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d116      	bne.n	8004c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c46:	4b5c      	ldr	r3, [pc, #368]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_RCC_OscConfig+0x152>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e1c4      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5e:	4b56      	ldr	r3, [pc, #344]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4952      	ldr	r1, [pc, #328]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	e03a      	b.n	8004cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d020      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c7c:	4b4f      	ldr	r3, [pc, #316]	; (8004dbc <HAL_RCC_OscConfig+0x2b0>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fd f90b 	bl	8001e9c <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8a:	f7fd f907 	bl	8001e9c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1a5      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9c:	4b46      	ldr	r3, [pc, #280]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4940      	ldr	r1, [pc, #256]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]
 8004cbc:	e015      	b.n	8004cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b3f      	ldr	r3, [pc, #252]	; (8004dbc <HAL_RCC_OscConfig+0x2b0>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fd f8ea 	bl	8001e9c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7fd f8e6 	bl	8001e9c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e184      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cde:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d030      	beq.n	8004d58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cfe:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <HAL_RCC_OscConfig+0x2b4>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fd f8ca 	bl	8001e9c <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0c:	f7fd f8c6 	bl	8001e9c <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e164      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1e:	4b26      	ldr	r3, [pc, #152]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x200>
 8004d2a:	e015      	b.n	8004d58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d2c:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCC_OscConfig+0x2b4>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d32:	f7fd f8b3 	bl	8001e9c <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d3a:	f7fd f8af 	bl	8001e9c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e14d      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80a0 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	; 0x40
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d121      	bne.n	8004de6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fd f875 	bl	8001e9c <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e011      	b.n	8004dda <HAL_RCC_OscConfig+0x2ce>
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	42470000 	.word	0x42470000
 8004dc0:	42470e80 	.word	0x42470e80
 8004dc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc8:	f7fd f868 	bl	8001e9c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e106      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	4b85      	ldr	r3, [pc, #532]	; (8004ff0 <HAL_RCC_OscConfig+0x4e4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d106      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2f0>
 8004dee:	4b81      	ldr	r3, [pc, #516]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	4a80      	ldr	r2, [pc, #512]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfa:	e01c      	b.n	8004e36 <HAL_RCC_OscConfig+0x32a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b05      	cmp	r3, #5
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_OscConfig+0x312>
 8004e04:	4b7b      	ldr	r3, [pc, #492]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	4a7a      	ldr	r2, [pc, #488]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e0a:	f043 0304 	orr.w	r3, r3, #4
 8004e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e10:	4b78      	ldr	r3, [pc, #480]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a77      	ldr	r2, [pc, #476]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1c:	e00b      	b.n	8004e36 <HAL_RCC_OscConfig+0x32a>
 8004e1e:	4b75      	ldr	r3, [pc, #468]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	4a74      	ldr	r2, [pc, #464]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2a:	4b72      	ldr	r3, [pc, #456]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	4a71      	ldr	r2, [pc, #452]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d015      	beq.n	8004e6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3e:	f7fd f82d 	bl	8001e9c <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e44:	e00a      	b.n	8004e5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e46:	f7fd f829 	bl	8001e9c <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e0c5      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5c:	4b65      	ldr	r3, [pc, #404]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0ee      	beq.n	8004e46 <HAL_RCC_OscConfig+0x33a>
 8004e68:	e014      	b.n	8004e94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e6a:	f7fd f817 	bl	8001e9c <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e70:	e00a      	b.n	8004e88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e72:	f7fd f813 	bl	8001e9c <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e0af      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e88:	4b5a      	ldr	r3, [pc, #360]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ee      	bne.n	8004e72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d105      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e9a:	4b56      	ldr	r3, [pc, #344]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4a55      	ldr	r2, [pc, #340]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 809b 	beq.w	8004fe6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eb0:	4b50      	ldr	r3, [pc, #320]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d05c      	beq.n	8004f76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d141      	bne.n	8004f48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec4:	4b4c      	ldr	r3, [pc, #304]	; (8004ff8 <HAL_RCC_OscConfig+0x4ec>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eca:	f7fc ffe7 	bl	8001e9c <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed2:	f7fc ffe3 	bl	8001e9c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e081      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee4:	4b43      	ldr	r3, [pc, #268]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	019b      	lsls	r3, r3, #6
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	061b      	lsls	r3, r3, #24
 8004f14:	4937      	ldr	r1, [pc, #220]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f1a:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <HAL_RCC_OscConfig+0x4ec>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fc ffbc 	bl	8001e9c <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fc ffb8 	bl	8001e9c <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e056      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x41c>
 8004f46:	e04e      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <HAL_RCC_OscConfig+0x4ec>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4e:	f7fc ffa5 	bl	8001e9c <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f56:	f7fc ffa1 	bl	8001e9c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e03f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f68:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <HAL_RCC_OscConfig+0x44a>
 8004f74:	e037      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e032      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d028      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d121      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d11a      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fb8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d111      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	085b      	lsrs	r3, r3, #1
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d001      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	42470060 	.word	0x42470060

08004ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0cc      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b68      	ldr	r3, [pc, #416]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d90c      	bls.n	8005038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b65      	ldr	r3, [pc, #404]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005026:	4b63      	ldr	r3, [pc, #396]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0b8      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d020      	beq.n	8005086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005050:	4b59      	ldr	r3, [pc, #356]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4a58      	ldr	r2, [pc, #352]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800505a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005068:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a52      	ldr	r2, [pc, #328]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005074:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	494d      	ldr	r1, [pc, #308]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d044      	beq.n	800511c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509a:	4b47      	ldr	r3, [pc, #284]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d119      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e07f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d003      	beq.n	80050ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b3f      	ldr	r3, [pc, #252]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ca:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e067      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4934      	ldr	r1, [pc, #208]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ec:	f7fc fed6 	bl	8001e9c <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fc fed2 	bl	8001e9c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e04f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d20c      	bcs.n	8005144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e032      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005150:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4916      	ldr	r1, [pc, #88]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	490e      	ldr	r1, [pc, #56]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005182:	f000 f821 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8005186:	4602      	mov	r2, r0
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	490a      	ldr	r1, [pc, #40]	; (80051bc <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	5ccb      	ldrb	r3, [r1, r3]
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <HAL_RCC_ClockConfig+0x1c8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fc fe36 	bl	8001e14 <HAL_InitTick>

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40023c00 	.word	0x40023c00
 80051b8:	40023800 	.word	0x40023800
 80051bc:	08008420 	.word	0x08008420
 80051c0:	20000368 	.word	0x20000368
 80051c4:	2000036c 	.word	0x2000036c

080051c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c8:	b5b0      	push	{r4, r5, r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051ce:	2100      	movs	r1, #0
 80051d0:	6079      	str	r1, [r7, #4]
 80051d2:	2100      	movs	r1, #0
 80051d4:	60f9      	str	r1, [r7, #12]
 80051d6:	2100      	movs	r1, #0
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051da:	2100      	movs	r1, #0
 80051dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051de:	4952      	ldr	r1, [pc, #328]	; (8005328 <HAL_RCC_GetSysClockFreq+0x160>)
 80051e0:	6889      	ldr	r1, [r1, #8]
 80051e2:	f001 010c 	and.w	r1, r1, #12
 80051e6:	2908      	cmp	r1, #8
 80051e8:	d00d      	beq.n	8005206 <HAL_RCC_GetSysClockFreq+0x3e>
 80051ea:	2908      	cmp	r1, #8
 80051ec:	f200 8094 	bhi.w	8005318 <HAL_RCC_GetSysClockFreq+0x150>
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d002      	beq.n	80051fa <HAL_RCC_GetSysClockFreq+0x32>
 80051f4:	2904      	cmp	r1, #4
 80051f6:	d003      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x38>
 80051f8:	e08e      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051fa:	4b4c      	ldr	r3, [pc, #304]	; (800532c <HAL_RCC_GetSysClockFreq+0x164>)
 80051fc:	60bb      	str	r3, [r7, #8]
       break;
 80051fe:	e08e      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005200:	4b4b      	ldr	r3, [pc, #300]	; (8005330 <HAL_RCC_GetSysClockFreq+0x168>)
 8005202:	60bb      	str	r3, [r7, #8]
      break;
 8005204:	e08b      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005206:	4948      	ldr	r1, [pc, #288]	; (8005328 <HAL_RCC_GetSysClockFreq+0x160>)
 8005208:	6849      	ldr	r1, [r1, #4]
 800520a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800520e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005210:	4945      	ldr	r1, [pc, #276]	; (8005328 <HAL_RCC_GetSysClockFreq+0x160>)
 8005212:	6849      	ldr	r1, [r1, #4]
 8005214:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005218:	2900      	cmp	r1, #0
 800521a:	d024      	beq.n	8005266 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800521c:	4942      	ldr	r1, [pc, #264]	; (8005328 <HAL_RCC_GetSysClockFreq+0x160>)
 800521e:	6849      	ldr	r1, [r1, #4]
 8005220:	0989      	lsrs	r1, r1, #6
 8005222:	4608      	mov	r0, r1
 8005224:	f04f 0100 	mov.w	r1, #0
 8005228:	f240 14ff 	movw	r4, #511	; 0x1ff
 800522c:	f04f 0500 	mov.w	r5, #0
 8005230:	ea00 0204 	and.w	r2, r0, r4
 8005234:	ea01 0305 	and.w	r3, r1, r5
 8005238:	493d      	ldr	r1, [pc, #244]	; (8005330 <HAL_RCC_GetSysClockFreq+0x168>)
 800523a:	fb01 f003 	mul.w	r0, r1, r3
 800523e:	2100      	movs	r1, #0
 8005240:	fb01 f102 	mul.w	r1, r1, r2
 8005244:	1844      	adds	r4, r0, r1
 8005246:	493a      	ldr	r1, [pc, #232]	; (8005330 <HAL_RCC_GetSysClockFreq+0x168>)
 8005248:	fba2 0101 	umull	r0, r1, r2, r1
 800524c:	1863      	adds	r3, r4, r1
 800524e:	4619      	mov	r1, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	461a      	mov	r2, r3
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	f7fb f812 	bl	8000280 <__aeabi_uldivmod>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4613      	mov	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e04a      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005266:	4b30      	ldr	r3, [pc, #192]	; (8005328 <HAL_RCC_GetSysClockFreq+0x160>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	099b      	lsrs	r3, r3, #6
 800526c:	461a      	mov	r2, r3
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005276:	f04f 0100 	mov.w	r1, #0
 800527a:	ea02 0400 	and.w	r4, r2, r0
 800527e:	ea03 0501 	and.w	r5, r3, r1
 8005282:	4620      	mov	r0, r4
 8005284:	4629      	mov	r1, r5
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	014b      	lsls	r3, r1, #5
 8005290:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005294:	0142      	lsls	r2, r0, #5
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	1b00      	subs	r0, r0, r4
 800529c:	eb61 0105 	sbc.w	r1, r1, r5
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	018b      	lsls	r3, r1, #6
 80052aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052ae:	0182      	lsls	r2, r0, #6
 80052b0:	1a12      	subs	r2, r2, r0
 80052b2:	eb63 0301 	sbc.w	r3, r3, r1
 80052b6:	f04f 0000 	mov.w	r0, #0
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	00d9      	lsls	r1, r3, #3
 80052c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052c4:	00d0      	lsls	r0, r2, #3
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	1912      	adds	r2, r2, r4
 80052cc:	eb45 0303 	adc.w	r3, r5, r3
 80052d0:	f04f 0000 	mov.w	r0, #0
 80052d4:	f04f 0100 	mov.w	r1, #0
 80052d8:	0299      	lsls	r1, r3, #10
 80052da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052de:	0290      	lsls	r0, r2, #10
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	f7fa ffc6 	bl	8000280 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4613      	mov	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052fc:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <HAL_RCC_GetSysClockFreq+0x160>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	3301      	adds	r3, #1
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	60bb      	str	r3, [r7, #8]
      break;
 8005316:	e002      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005318:	4b04      	ldr	r3, [pc, #16]	; (800532c <HAL_RCC_GetSysClockFreq+0x164>)
 800531a:	60bb      	str	r3, [r7, #8]
      break;
 800531c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800531e:	68bb      	ldr	r3, [r7, #8]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bdb0      	pop	{r4, r5, r7, pc}
 8005328:	40023800 	.word	0x40023800
 800532c:	00f42400 	.word	0x00f42400
 8005330:	017d7840 	.word	0x017d7840

08005334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005338:	4b03      	ldr	r3, [pc, #12]	; (8005348 <HAL_RCC_GetHCLKFreq+0x14>)
 800533a:	681b      	ldr	r3, [r3, #0]
}
 800533c:	4618      	mov	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000368 	.word	0x20000368

0800534c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005350:	f7ff fff0 	bl	8005334 <HAL_RCC_GetHCLKFreq>
 8005354:	4602      	mov	r2, r0
 8005356:	4b05      	ldr	r3, [pc, #20]	; (800536c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	0a9b      	lsrs	r3, r3, #10
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	4903      	ldr	r1, [pc, #12]	; (8005370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005362:	5ccb      	ldrb	r3, [r1, r3]
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40023800 	.word	0x40023800
 8005370:	08008430 	.word	0x08008430

08005374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005378:	f7ff ffdc 	bl	8005334 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0b5b      	lsrs	r3, r3, #13
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4903      	ldr	r1, [pc, #12]	; (8005398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40023800 	.word	0x40023800
 8005398:	08008430 	.word	0x08008430

0800539c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e041      	b.n	8005432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fc fc00 	bl	8001bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3304      	adds	r3, #4
 80053d8:	4619      	mov	r1, r3
 80053da:	4610      	mov	r0, r2
 80053dc:	f000 fbb2 	bl	8005b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d001      	beq.n	8005454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e04e      	b.n	80054f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a23      	ldr	r2, [pc, #140]	; (8005500 <HAL_TIM_Base_Start_IT+0xc4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d022      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x80>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547e:	d01d      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x80>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1f      	ldr	r2, [pc, #124]	; (8005504 <HAL_TIM_Base_Start_IT+0xc8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d018      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x80>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1e      	ldr	r2, [pc, #120]	; (8005508 <HAL_TIM_Base_Start_IT+0xcc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x80>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1c      	ldr	r2, [pc, #112]	; (800550c <HAL_TIM_Base_Start_IT+0xd0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00e      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x80>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <HAL_TIM_Base_Start_IT+0xd4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x80>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a19      	ldr	r2, [pc, #100]	; (8005514 <HAL_TIM_Base_Start_IT+0xd8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x80>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_TIM_Base_Start_IT+0xdc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d111      	bne.n	80054e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d010      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054de:	e007      	b.n	80054f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40010000 	.word	0x40010000
 8005504:	40000400 	.word	0x40000400
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40010400 	.word	0x40010400
 8005514:	40014000 	.word	0x40014000
 8005518:	40001800 	.word	0x40001800

0800551c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <HAL_TIM_OC_Start+0x24>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e022      	b.n	8005586 <HAL_TIM_OC_Start+0x6a>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d109      	bne.n	800555a <HAL_TIM_OC_Start+0x3e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b01      	cmp	r3, #1
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	e015      	b.n	8005586 <HAL_TIM_OC_Start+0x6a>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d109      	bne.n	8005574 <HAL_TIM_OC_Start+0x58>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e008      	b.n	8005586 <HAL_TIM_OC_Start+0x6a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e07c      	b.n	8005688 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <HAL_TIM_OC_Start+0x82>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559c:	e013      	b.n	80055c6 <HAL_TIM_OC_Start+0xaa>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_OC_Start+0x92>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ac:	e00b      	b.n	80055c6 <HAL_TIM_OC_Start+0xaa>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d104      	bne.n	80055be <HAL_TIM_OC_Start+0xa2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055bc:	e003      	b.n	80055c6 <HAL_TIM_OC_Start+0xaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fd08 	bl	8005fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a2d      	ldr	r2, [pc, #180]	; (8005690 <HAL_TIM_OC_Start+0x174>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIM_OC_Start+0xcc>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <HAL_TIM_OC_Start+0x178>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_OC_Start+0xd0>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <HAL_TIM_OC_Start+0xd2>
 80055ec:	2300      	movs	r3, #0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a22      	ldr	r2, [pc, #136]	; (8005690 <HAL_TIM_OC_Start+0x174>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d022      	beq.n	8005652 <HAL_TIM_OC_Start+0x136>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005614:	d01d      	beq.n	8005652 <HAL_TIM_OC_Start+0x136>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1f      	ldr	r2, [pc, #124]	; (8005698 <HAL_TIM_OC_Start+0x17c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d018      	beq.n	8005652 <HAL_TIM_OC_Start+0x136>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1d      	ldr	r2, [pc, #116]	; (800569c <HAL_TIM_OC_Start+0x180>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_TIM_OC_Start+0x136>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <HAL_TIM_OC_Start+0x184>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_TIM_OC_Start+0x136>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a16      	ldr	r2, [pc, #88]	; (8005694 <HAL_TIM_OC_Start+0x178>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_TIM_OC_Start+0x136>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <HAL_TIM_OC_Start+0x188>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_TIM_OC_Start+0x136>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a16      	ldr	r2, [pc, #88]	; (80056a8 <HAL_TIM_OC_Start+0x18c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d111      	bne.n	8005676 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b06      	cmp	r3, #6
 8005662:	d010      	beq.n	8005686 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	e007      	b.n	8005686 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40010000 	.word	0x40010000
 8005694:	40010400 	.word	0x40010400
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40001800 	.word	0x40001800

080056ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e041      	b.n	8005742 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fc fa58 	bl	8001b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fa2a 	bl	8005b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b02      	cmp	r3, #2
 800575e:	d122      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b02      	cmp	r3, #2
 800576c:	d11b      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f06f 0202 	mvn.w	r2, #2
 8005776:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9bb 	bl	8005b08 <HAL_TIM_IC_CaptureCallback>
 8005792:	e005      	b.n	80057a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f9ad 	bl	8005af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9be 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d122      	bne.n	80057fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d11b      	bne.n	80057fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0204 	mvn.w	r2, #4
 80057ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f991 	bl	8005b08 <HAL_TIM_IC_CaptureCallback>
 80057e6:	e005      	b.n	80057f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f983 	bl	8005af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f994 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b08      	cmp	r3, #8
 8005806:	d122      	bne.n	800584e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b08      	cmp	r3, #8
 8005814:	d11b      	bne.n	800584e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f06f 0208 	mvn.w	r2, #8
 800581e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2204      	movs	r2, #4
 8005824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f967 	bl	8005b08 <HAL_TIM_IC_CaptureCallback>
 800583a:	e005      	b.n	8005848 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f959 	bl	8005af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f96a 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b10      	cmp	r3, #16
 800585a:	d122      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b10      	cmp	r3, #16
 8005868:	d11b      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0210 	mvn.w	r2, #16
 8005872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2208      	movs	r2, #8
 8005878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f93d 	bl	8005b08 <HAL_TIM_IC_CaptureCallback>
 800588e:	e005      	b.n	800589c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f92f 	bl	8005af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f940 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d10e      	bne.n	80058ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d107      	bne.n	80058ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f06f 0201 	mvn.w	r2, #1
 80058c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f909 	bl	8005ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b80      	cmp	r3, #128	; 0x80
 80058da:	d10e      	bne.n	80058fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d107      	bne.n	80058fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fc21 	bl	800613c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d10e      	bne.n	8005926 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d107      	bne.n	8005926 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800591e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f905 	bl	8005b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b20      	cmp	r3, #32
 8005932:	d10e      	bne.n	8005952 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b20      	cmp	r3, #32
 8005940:	d107      	bne.n	8005952 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f06f 0220 	mvn.w	r2, #32
 800594a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fbeb 	bl	8006128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005976:	2302      	movs	r3, #2
 8005978:	e0ae      	b.n	8005ad8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b0c      	cmp	r3, #12
 8005986:	f200 809f 	bhi.w	8005ac8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800598a:	a201      	add	r2, pc, #4	; (adr r2, 8005990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800598c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005990:	080059c5 	.word	0x080059c5
 8005994:	08005ac9 	.word	0x08005ac9
 8005998:	08005ac9 	.word	0x08005ac9
 800599c:	08005ac9 	.word	0x08005ac9
 80059a0:	08005a05 	.word	0x08005a05
 80059a4:	08005ac9 	.word	0x08005ac9
 80059a8:	08005ac9 	.word	0x08005ac9
 80059ac:	08005ac9 	.word	0x08005ac9
 80059b0:	08005a47 	.word	0x08005a47
 80059b4:	08005ac9 	.word	0x08005ac9
 80059b8:	08005ac9 	.word	0x08005ac9
 80059bc:	08005ac9 	.word	0x08005ac9
 80059c0:	08005a87 	.word	0x08005a87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f95a 	bl	8005c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0208 	orr.w	r2, r2, #8
 80059de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0204 	bic.w	r2, r2, #4
 80059ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6999      	ldr	r1, [r3, #24]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	619a      	str	r2, [r3, #24]
      break;
 8005a02:	e064      	b.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f9aa 	bl	8005d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6999      	ldr	r1, [r3, #24]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	619a      	str	r2, [r3, #24]
      break;
 8005a44:	e043      	b.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f9ff 	bl	8005e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0208 	orr.w	r2, r2, #8
 8005a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0204 	bic.w	r2, r2, #4
 8005a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69d9      	ldr	r1, [r3, #28]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	61da      	str	r2, [r3, #28]
      break;
 8005a84:	e023      	b.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fa53 	bl	8005f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69da      	ldr	r2, [r3, #28]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69d9      	ldr	r1, [r3, #28]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	021a      	lsls	r2, r3, #8
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	61da      	str	r2, [r3, #28]
      break;
 8005ac6:	e002      	b.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	75fb      	strb	r3, [r7, #23]
      break;
 8005acc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a40      	ldr	r2, [pc, #256]	; (8005c58 <TIM_Base_SetConfig+0x114>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b62:	d00f      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a3d      	ldr	r2, [pc, #244]	; (8005c5c <TIM_Base_SetConfig+0x118>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3c      	ldr	r2, [pc, #240]	; (8005c60 <TIM_Base_SetConfig+0x11c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3b      	ldr	r2, [pc, #236]	; (8005c64 <TIM_Base_SetConfig+0x120>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3a      	ldr	r2, [pc, #232]	; (8005c68 <TIM_Base_SetConfig+0x124>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d108      	bne.n	8005b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2f      	ldr	r2, [pc, #188]	; (8005c58 <TIM_Base_SetConfig+0x114>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d02b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba4:	d027      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2c      	ldr	r2, [pc, #176]	; (8005c5c <TIM_Base_SetConfig+0x118>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d023      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2b      	ldr	r2, [pc, #172]	; (8005c60 <TIM_Base_SetConfig+0x11c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01f      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2a      	ldr	r2, [pc, #168]	; (8005c64 <TIM_Base_SetConfig+0x120>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <TIM_Base_SetConfig+0x124>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d017      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a28      	ldr	r2, [pc, #160]	; (8005c6c <TIM_Base_SetConfig+0x128>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a27      	ldr	r2, [pc, #156]	; (8005c70 <TIM_Base_SetConfig+0x12c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a26      	ldr	r2, [pc, #152]	; (8005c74 <TIM_Base_SetConfig+0x130>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a25      	ldr	r2, [pc, #148]	; (8005c78 <TIM_Base_SetConfig+0x134>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a24      	ldr	r2, [pc, #144]	; (8005c7c <TIM_Base_SetConfig+0x138>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a23      	ldr	r2, [pc, #140]	; (8005c80 <TIM_Base_SetConfig+0x13c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d108      	bne.n	8005c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <TIM_Base_SetConfig+0x114>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_Base_SetConfig+0xf8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a0c      	ldr	r2, [pc, #48]	; (8005c68 <TIM_Base_SetConfig+0x124>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d103      	bne.n	8005c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	615a      	str	r2, [r3, #20]
}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	40010400 	.word	0x40010400
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40014400 	.word	0x40014400
 8005c74:	40014800 	.word	0x40014800
 8005c78:	40001800 	.word	0x40001800
 8005c7c:	40001c00 	.word	0x40001c00
 8005c80:	40002000 	.word	0x40002000

08005c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f023 0201 	bic.w	r2, r3, #1
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f023 0302 	bic.w	r3, r3, #2
 8005ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a20      	ldr	r2, [pc, #128]	; (8005d5c <TIM_OC1_SetConfig+0xd8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_OC1_SetConfig+0x64>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a1f      	ldr	r2, [pc, #124]	; (8005d60 <TIM_OC1_SetConfig+0xdc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d10c      	bne.n	8005d02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f023 0308 	bic.w	r3, r3, #8
 8005cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f023 0304 	bic.w	r3, r3, #4
 8005d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a15      	ldr	r2, [pc, #84]	; (8005d5c <TIM_OC1_SetConfig+0xd8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_OC1_SetConfig+0x8e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a14      	ldr	r2, [pc, #80]	; (8005d60 <TIM_OC1_SetConfig+0xdc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d111      	bne.n	8005d36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	621a      	str	r2, [r3, #32]
}
 8005d50:	bf00      	nop
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40010400 	.word	0x40010400

08005d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0210 	bic.w	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f023 0320 	bic.w	r3, r3, #32
 8005dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <TIM_OC2_SetConfig+0xe4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_OC2_SetConfig+0x68>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a21      	ldr	r2, [pc, #132]	; (8005e4c <TIM_OC2_SetConfig+0xe8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d10d      	bne.n	8005de8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <TIM_OC2_SetConfig+0xe4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_OC2_SetConfig+0x94>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <TIM_OC2_SetConfig+0xe8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d113      	bne.n	8005e20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40010400 	.word	0x40010400

08005e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0303 	bic.w	r3, r3, #3
 8005e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <TIM_OC3_SetConfig+0xe0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_OC3_SetConfig+0x66>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a20      	ldr	r2, [pc, #128]	; (8005f34 <TIM_OC3_SetConfig+0xe4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d10d      	bne.n	8005ed2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <TIM_OC3_SetConfig+0xe0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_OC3_SetConfig+0x92>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <TIM_OC3_SetConfig+0xe4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d113      	bne.n	8005f0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	621a      	str	r2, [r3, #32]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	40010000 	.word	0x40010000
 8005f34:	40010400 	.word	0x40010400

08005f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	031b      	lsls	r3, r3, #12
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a12      	ldr	r2, [pc, #72]	; (8005fdc <TIM_OC4_SetConfig+0xa4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC4_SetConfig+0x68>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <TIM_OC4_SetConfig+0xa8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d109      	bne.n	8005fb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	019b      	lsls	r3, r3, #6
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40010400 	.word	0x40010400

08005fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	43db      	mvns	r3, r3
 8006006:	401a      	ands	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	fa01 f303 	lsl.w	r3, r1, r3
 800601c:	431a      	orrs	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006044:	2302      	movs	r3, #2
 8006046:	e05a      	b.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a21      	ldr	r2, [pc, #132]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d022      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006094:	d01d      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d018      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1b      	ldr	r2, [pc, #108]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1a      	ldr	r2, [pc, #104]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00e      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d009      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a17      	ldr	r2, [pc, #92]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d10c      	bne.n	80060ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40010400 	.word	0x40010400
 8006120:	40014000 	.word	0x40014000
 8006124:	40001800 	.word	0x40001800

08006128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e03f      	b.n	80061e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fb fdb0 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2224      	movs	r2, #36	; 0x24
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fd7b 	bl	8006c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695a      	ldr	r2, [r3, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b08a      	sub	sp, #40	; 0x28
 80061ee:	af02      	add	r7, sp, #8
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	603b      	str	r3, [r7, #0]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b20      	cmp	r3, #32
 8006208:	d17c      	bne.n	8006304 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_UART_Transmit+0x2c>
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e075      	b.n	8006306 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_UART_Transmit+0x3e>
 8006224:	2302      	movs	r3, #2
 8006226:	e06e      	b.n	8006306 <HAL_UART_Transmit+0x11c>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2221      	movs	r2, #33	; 0x21
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800623e:	f7fb fe2d 	bl	8001e9c <HAL_GetTick>
 8006242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	88fa      	ldrh	r2, [r7, #6]
 8006248:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	88fa      	ldrh	r2, [r7, #6]
 800624e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006258:	d108      	bne.n	800626c <HAL_UART_Transmit+0x82>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	e003      	b.n	8006274 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006270:	2300      	movs	r3, #0
 8006272:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800627c:	e02a      	b.n	80062d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2200      	movs	r2, #0
 8006286:	2180      	movs	r1, #128	; 0x80
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 faf9 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e036      	b.n	8006306 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	3302      	adds	r3, #2
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	e007      	b.n	80062c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	781a      	ldrb	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	3301      	adds	r3, #1
 80062c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1cf      	bne.n	800627e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2200      	movs	r2, #0
 80062e6:	2140      	movs	r1, #64	; 0x40
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fac9 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e006      	b.n	8006306 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	e000      	b.n	8006306 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006304:	2302      	movs	r3, #2
  }
}
 8006306:	4618      	mov	r0, r3
 8006308:	3720      	adds	r7, #32
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b0ba      	sub	sp, #232	; 0xe8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006336:	2300      	movs	r3, #0
 8006338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800633c:	2300      	movs	r3, #0
 800633e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800634e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10f      	bne.n	8006376 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <HAL_UART_IRQHandler+0x66>
 8006362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fbd3 	bl	8006b1a <UART_Receive_IT>
      return;
 8006374:	e256      	b.n	8006824 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 80de 	beq.w	800653c <HAL_UART_IRQHandler+0x22c>
 8006380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800638c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006390:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 80d1 	beq.w	800653c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <HAL_UART_IRQHandler+0xae>
 80063a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f043 0201 	orr.w	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00b      	beq.n	80063e2 <HAL_UART_IRQHandler+0xd2>
 80063ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f043 0202 	orr.w	r2, r3, #2
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <HAL_UART_IRQHandler+0xf6>
 80063ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f043 0204 	orr.w	r2, r3, #4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d011      	beq.n	8006436 <HAL_UART_IRQHandler+0x126>
 8006412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d105      	bne.n	800642a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800641e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f043 0208 	orr.w	r2, r3, #8
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 81ed 	beq.w	800681a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_UART_IRQHandler+0x14e>
 800644c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fb5e 	bl	8006b1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	bf0c      	ite	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	2300      	movne	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d103      	bne.n	800648a <HAL_UART_IRQHandler+0x17a>
 8006482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d04f      	beq.n	800652a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa66 	bl	800695c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649a:	2b40      	cmp	r3, #64	; 0x40
 800649c:	d141      	bne.n	8006522 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3314      	adds	r3, #20
 80064c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1d9      	bne.n	800649e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d013      	beq.n	800651a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	4a7d      	ldr	r2, [pc, #500]	; (80066ec <HAL_UART_IRQHandler+0x3dc>)
 80064f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fb fe7d 	bl	80021fe <HAL_DMA_Abort_IT>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d016      	beq.n	8006538 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006514:	4610      	mov	r0, r2
 8006516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006518:	e00e      	b.n	8006538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f99a 	bl	8006854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006520:	e00a      	b.n	8006538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f996 	bl	8006854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	e006      	b.n	8006538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f992 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006536:	e170      	b.n	800681a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	bf00      	nop
    return;
 800653a:	e16e      	b.n	800681a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	2b01      	cmp	r3, #1
 8006542:	f040 814a 	bne.w	80067da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8143 	beq.w	80067da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 813c 	beq.w	80067da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006562:	2300      	movs	r3, #0
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	60bb      	str	r3, [r7, #8]
 8006576:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	f040 80b4 	bne.w	80066f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006594:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 8140 	beq.w	800681e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065a6:	429a      	cmp	r2, r3
 80065a8:	f080 8139 	bcs.w	800681e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065be:	f000 8088 	beq.w	80066d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	330c      	adds	r3, #12
 80065c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1d9      	bne.n	80065c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3314      	adds	r3, #20
 8006614:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800661e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006620:	f023 0301 	bic.w	r3, r3, #1
 8006624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3314      	adds	r3, #20
 800662e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006632:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006636:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800663a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e1      	bne.n	800660e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3314      	adds	r3, #20
 8006650:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800665a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800665c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3314      	adds	r3, #20
 800666a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800666e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006670:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006674:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800667c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e3      	bne.n	800664a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a2:	f023 0310 	bic.w	r3, r3, #16
 80066a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	330c      	adds	r3, #12
 80066b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80066b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e3      	bne.n	8006690 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fb fd26 	bl	800211e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066da:	b29b      	uxth	r3, r3
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	b29b      	uxth	r3, r3
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f8c0 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066e8:	e099      	b.n	800681e <HAL_UART_IRQHandler+0x50e>
 80066ea:	bf00      	nop
 80066ec:	08006a23 	.word	0x08006a23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 808b 	beq.w	8006822 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800670c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8086 	beq.w	8006822 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	330c      	adds	r3, #12
 800671c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800673a:	647a      	str	r2, [r7, #68]	; 0x44
 800673c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e3      	bne.n	8006716 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3314      	adds	r3, #20
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	623b      	str	r3, [r7, #32]
   return(result);
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3314      	adds	r3, #20
 800676e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006772:	633a      	str	r2, [r7, #48]	; 0x30
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e3      	bne.n	800674e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0310 	bic.w	r3, r3, #16
 80067aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	330c      	adds	r3, #12
 80067b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067b8:	61fa      	str	r2, [r7, #28]
 80067ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	69b9      	ldr	r1, [r7, #24]
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	617b      	str	r3, [r7, #20]
   return(result);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e3      	bne.n	8006794 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f848 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067d8:	e023      	b.n	8006822 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <HAL_UART_IRQHandler+0x4ea>
 80067e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f929 	bl	8006a4a <UART_Transmit_IT>
    return;
 80067f8:	e014      	b.n	8006824 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00e      	beq.n	8006824 <HAL_UART_IRQHandler+0x514>
 8006806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f969 	bl	8006aea <UART_EndTransmit_IT>
    return;
 8006818:	e004      	b.n	8006824 <HAL_UART_IRQHandler+0x514>
    return;
 800681a:	bf00      	nop
 800681c:	e002      	b.n	8006824 <HAL_UART_IRQHandler+0x514>
      return;
 800681e:	bf00      	nop
 8006820:	e000      	b.n	8006824 <HAL_UART_IRQHandler+0x514>
      return;
 8006822:	bf00      	nop
  }
}
 8006824:	37e8      	adds	r7, #232	; 0xe8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop

0800682c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b090      	sub	sp, #64	; 0x40
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006890:	e050      	b.n	8006934 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d04c      	beq.n	8006934 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800689a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068a0:	f7fb fafc 	bl	8001e9c <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d241      	bcs.n	8006934 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	330c      	adds	r3, #12
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068d0:	637a      	str	r2, [r7, #52]	; 0x34
 80068d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e5      	bne.n	80068b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3314      	adds	r3, #20
 80068ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	613b      	str	r3, [r7, #16]
   return(result);
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f023 0301 	bic.w	r3, r3, #1
 80068fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3314      	adds	r3, #20
 8006902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006904:	623a      	str	r2, [r7, #32]
 8006906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	69f9      	ldr	r1, [r7, #28]
 800690a:	6a3a      	ldr	r2, [r7, #32]
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	61bb      	str	r3, [r7, #24]
   return(result);
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e5      	bne.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e00f      	b.n	8006954 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4013      	ands	r3, r2
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	bf0c      	ite	eq
 8006944:	2301      	moveq	r3, #1
 8006946:	2300      	movne	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	429a      	cmp	r2, r3
 8006950:	d09f      	beq.n	8006892 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3740      	adds	r7, #64	; 0x40
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b095      	sub	sp, #84	; 0x54
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800697a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006984:	643a      	str	r2, [r7, #64]	; 0x40
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800698a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e5      	bne.n	8006964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3314      	adds	r3, #20
 80069b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e5      	bne.n	8006998 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d119      	bne.n	8006a08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	330c      	adds	r3, #12
 80069da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f023 0310 	bic.w	r3, r3, #16
 80069ea:	647b      	str	r3, [r7, #68]	; 0x44
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f4:	61ba      	str	r2, [r7, #24]
 80069f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6979      	ldr	r1, [r7, #20]
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	613b      	str	r3, [r7, #16]
   return(result);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e5      	bne.n	80069d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a16:	bf00      	nop
 8006a18:	3754      	adds	r7, #84	; 0x54
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f7ff ff09 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b21      	cmp	r3, #33	; 0x21
 8006a5c:	d13e      	bne.n	8006adc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a66:	d114      	bne.n	8006a92 <UART_Transmit_IT+0x48>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d110      	bne.n	8006a92 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	1c9a      	adds	r2, r3, #2
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	621a      	str	r2, [r3, #32]
 8006a90:	e008      	b.n	8006aa4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	1c59      	adds	r1, r3, #1
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6211      	str	r1, [r2, #32]
 8006a9c:	781a      	ldrb	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10f      	bne.n	8006ad8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ac6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e000      	b.n	8006ade <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff fe8e 	bl	800682c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b08c      	sub	sp, #48	; 0x30
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b22      	cmp	r3, #34	; 0x22
 8006b2c:	f040 80ab 	bne.w	8006c86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b38:	d117      	bne.n	8006b6a <UART_Receive_IT+0x50>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d113      	bne.n	8006b6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	1c9a      	adds	r2, r3, #2
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28
 8006b68:	e026      	b.n	8006bb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7c:	d007      	beq.n	8006b8e <UART_Receive_IT+0x74>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <UART_Receive_IT+0x82>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	e008      	b.n	8006bae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d15a      	bne.n	8006c82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0220 	bic.w	r2, r2, #32
 8006bda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0201 	bic.w	r2, r2, #1
 8006bfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d135      	bne.n	8006c78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	330c      	adds	r3, #12
 8006c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	613b      	str	r3, [r7, #16]
   return(result);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f023 0310 	bic.w	r3, r3, #16
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	330c      	adds	r3, #12
 8006c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c32:	623a      	str	r2, [r7, #32]
 8006c34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	69f9      	ldr	r1, [r7, #28]
 8006c38:	6a3a      	ldr	r2, [r7, #32]
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e5      	bne.n	8006c12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	d10a      	bne.n	8006c6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fdf9 	bl	8006868 <HAL_UARTEx_RxEventCallback>
 8006c76:	e002      	b.n	8006c7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff fde1 	bl	8006840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e002      	b.n	8006c88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e000      	b.n	8006c88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c86:	2302      	movs	r3, #2
  }
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3730      	adds	r7, #48	; 0x30
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	b09f      	sub	sp, #124	; 0x7c
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca6:	68d9      	ldr	r1, [r3, #12]
 8006ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	ea40 0301 	orr.w	r3, r0, r1
 8006cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cd4:	f021 010c 	bic.w	r1, r1, #12
 8006cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cee:	6999      	ldr	r1, [r3, #24]
 8006cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	ea40 0301 	orr.w	r3, r0, r1
 8006cf8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4bc5      	ldr	r3, [pc, #788]	; (8007014 <UART_SetConfig+0x384>)
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d004      	beq.n	8006d0e <UART_SetConfig+0x7e>
 8006d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4bc3      	ldr	r3, [pc, #780]	; (8007018 <UART_SetConfig+0x388>)
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d103      	bne.n	8006d16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d0e:	f7fe fb31 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8006d12:	6778      	str	r0, [r7, #116]	; 0x74
 8006d14:	e002      	b.n	8006d1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d16:	f7fe fb19 	bl	800534c <HAL_RCC_GetPCLK1Freq>
 8006d1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d24:	f040 80b6 	bne.w	8006e94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d2a:	461c      	mov	r4, r3
 8006d2c:	f04f 0500 	mov.w	r5, #0
 8006d30:	4622      	mov	r2, r4
 8006d32:	462b      	mov	r3, r5
 8006d34:	1891      	adds	r1, r2, r2
 8006d36:	6439      	str	r1, [r7, #64]	; 0x40
 8006d38:	415b      	adcs	r3, r3
 8006d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d40:	1912      	adds	r2, r2, r4
 8006d42:	eb45 0303 	adc.w	r3, r5, r3
 8006d46:	f04f 0000 	mov.w	r0, #0
 8006d4a:	f04f 0100 	mov.w	r1, #0
 8006d4e:	00d9      	lsls	r1, r3, #3
 8006d50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d54:	00d0      	lsls	r0, r2, #3
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	1911      	adds	r1, r2, r4
 8006d5c:	6639      	str	r1, [r7, #96]	; 0x60
 8006d5e:	416b      	adcs	r3, r5
 8006d60:	667b      	str	r3, [r7, #100]	; 0x64
 8006d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	461a      	mov	r2, r3
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	1891      	adds	r1, r2, r2
 8006d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d70:	415b      	adcs	r3, r3
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d7c:	f7f9 fa80 	bl	8000280 <__aeabi_uldivmod>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4ba5      	ldr	r3, [pc, #660]	; (800701c <UART_SetConfig+0x38c>)
 8006d86:	fba3 2302 	umull	r2, r3, r3, r2
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	011e      	lsls	r6, r3, #4
 8006d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d90:	461c      	mov	r4, r3
 8006d92:	f04f 0500 	mov.w	r5, #0
 8006d96:	4622      	mov	r2, r4
 8006d98:	462b      	mov	r3, r5
 8006d9a:	1891      	adds	r1, r2, r2
 8006d9c:	6339      	str	r1, [r7, #48]	; 0x30
 8006d9e:	415b      	adcs	r3, r3
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
 8006da2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006da6:	1912      	adds	r2, r2, r4
 8006da8:	eb45 0303 	adc.w	r3, r5, r3
 8006dac:	f04f 0000 	mov.w	r0, #0
 8006db0:	f04f 0100 	mov.w	r1, #0
 8006db4:	00d9      	lsls	r1, r3, #3
 8006db6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dba:	00d0      	lsls	r0, r2, #3
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	1911      	adds	r1, r2, r4
 8006dc2:	65b9      	str	r1, [r7, #88]	; 0x58
 8006dc4:	416b      	adcs	r3, r5
 8006dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	1891      	adds	r1, r2, r2
 8006dd4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006dd6:	415b      	adcs	r3, r3
 8006dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006de2:	f7f9 fa4d 	bl	8000280 <__aeabi_uldivmod>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4b8c      	ldr	r3, [pc, #560]	; (800701c <UART_SetConfig+0x38c>)
 8006dec:	fba3 1302 	umull	r1, r3, r3, r2
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	2164      	movs	r1, #100	; 0x64
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	3332      	adds	r3, #50	; 0x32
 8006dfe:	4a87      	ldr	r2, [pc, #540]	; (800701c <UART_SetConfig+0x38c>)
 8006e00:	fba2 2303 	umull	r2, r3, r2, r3
 8006e04:	095b      	lsrs	r3, r3, #5
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e0c:	441e      	add	r6, r3
 8006e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e10:	4618      	mov	r0, r3
 8006e12:	f04f 0100 	mov.w	r1, #0
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	1894      	adds	r4, r2, r2
 8006e1c:	623c      	str	r4, [r7, #32]
 8006e1e:	415b      	adcs	r3, r3
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
 8006e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e26:	1812      	adds	r2, r2, r0
 8006e28:	eb41 0303 	adc.w	r3, r1, r3
 8006e2c:	f04f 0400 	mov.w	r4, #0
 8006e30:	f04f 0500 	mov.w	r5, #0
 8006e34:	00dd      	lsls	r5, r3, #3
 8006e36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e3a:	00d4      	lsls	r4, r2, #3
 8006e3c:	4622      	mov	r2, r4
 8006e3e:	462b      	mov	r3, r5
 8006e40:	1814      	adds	r4, r2, r0
 8006e42:	653c      	str	r4, [r7, #80]	; 0x50
 8006e44:	414b      	adcs	r3, r1
 8006e46:	657b      	str	r3, [r7, #84]	; 0x54
 8006e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f04f 0300 	mov.w	r3, #0
 8006e52:	1891      	adds	r1, r2, r2
 8006e54:	61b9      	str	r1, [r7, #24]
 8006e56:	415b      	adcs	r3, r3
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e62:	f7f9 fa0d 	bl	8000280 <__aeabi_uldivmod>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4b6c      	ldr	r3, [pc, #432]	; (800701c <UART_SetConfig+0x38c>)
 8006e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e70:	095b      	lsrs	r3, r3, #5
 8006e72:	2164      	movs	r1, #100	; 0x64
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	3332      	adds	r3, #50	; 0x32
 8006e7e:	4a67      	ldr	r2, [pc, #412]	; (800701c <UART_SetConfig+0x38c>)
 8006e80:	fba2 2303 	umull	r2, r3, r2, r3
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	f003 0207 	and.w	r2, r3, #7
 8006e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4432      	add	r2, r6
 8006e90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e92:	e0b9      	b.n	8007008 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e96:	461c      	mov	r4, r3
 8006e98:	f04f 0500 	mov.w	r5, #0
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	462b      	mov	r3, r5
 8006ea0:	1891      	adds	r1, r2, r2
 8006ea2:	6139      	str	r1, [r7, #16]
 8006ea4:	415b      	adcs	r3, r3
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006eac:	1912      	adds	r2, r2, r4
 8006eae:	eb45 0303 	adc.w	r3, r5, r3
 8006eb2:	f04f 0000 	mov.w	r0, #0
 8006eb6:	f04f 0100 	mov.w	r1, #0
 8006eba:	00d9      	lsls	r1, r3, #3
 8006ebc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ec0:	00d0      	lsls	r0, r2, #3
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	eb12 0804 	adds.w	r8, r2, r4
 8006eca:	eb43 0905 	adc.w	r9, r3, r5
 8006ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f04f 0100 	mov.w	r1, #0
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	008b      	lsls	r3, r1, #2
 8006ee2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ee6:	0082      	lsls	r2, r0, #2
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4649      	mov	r1, r9
 8006eec:	f7f9 f9c8 	bl	8000280 <__aeabi_uldivmod>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4b49      	ldr	r3, [pc, #292]	; (800701c <UART_SetConfig+0x38c>)
 8006ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	011e      	lsls	r6, r3, #4
 8006efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f00:	4618      	mov	r0, r3
 8006f02:	f04f 0100 	mov.w	r1, #0
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	1894      	adds	r4, r2, r2
 8006f0c:	60bc      	str	r4, [r7, #8]
 8006f0e:	415b      	adcs	r3, r3
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f16:	1812      	adds	r2, r2, r0
 8006f18:	eb41 0303 	adc.w	r3, r1, r3
 8006f1c:	f04f 0400 	mov.w	r4, #0
 8006f20:	f04f 0500 	mov.w	r5, #0
 8006f24:	00dd      	lsls	r5, r3, #3
 8006f26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f2a:	00d4      	lsls	r4, r2, #3
 8006f2c:	4622      	mov	r2, r4
 8006f2e:	462b      	mov	r3, r5
 8006f30:	1814      	adds	r4, r2, r0
 8006f32:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f34:	414b      	adcs	r3, r1
 8006f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f04f 0100 	mov.w	r1, #0
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	008b      	lsls	r3, r1, #2
 8006f4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f50:	0082      	lsls	r2, r0, #2
 8006f52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f56:	f7f9 f993 	bl	8000280 <__aeabi_uldivmod>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4b2f      	ldr	r3, [pc, #188]	; (800701c <UART_SetConfig+0x38c>)
 8006f60:	fba3 1302 	umull	r1, r3, r3, r2
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	2164      	movs	r1, #100	; 0x64
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	3332      	adds	r3, #50	; 0x32
 8006f72:	4a2a      	ldr	r2, [pc, #168]	; (800701c <UART_SetConfig+0x38c>)
 8006f74:	fba2 2303 	umull	r2, r3, r2, r3
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f7e:	441e      	add	r6, r3
 8006f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f82:	4618      	mov	r0, r3
 8006f84:	f04f 0100 	mov.w	r1, #0
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	1894      	adds	r4, r2, r2
 8006f8e:	603c      	str	r4, [r7, #0]
 8006f90:	415b      	adcs	r3, r3
 8006f92:	607b      	str	r3, [r7, #4]
 8006f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f98:	1812      	adds	r2, r2, r0
 8006f9a:	eb41 0303 	adc.w	r3, r1, r3
 8006f9e:	f04f 0400 	mov.w	r4, #0
 8006fa2:	f04f 0500 	mov.w	r5, #0
 8006fa6:	00dd      	lsls	r5, r3, #3
 8006fa8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fac:	00d4      	lsls	r4, r2, #3
 8006fae:	4622      	mov	r2, r4
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	eb12 0a00 	adds.w	sl, r2, r0
 8006fb6:	eb43 0b01 	adc.w	fp, r3, r1
 8006fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f04f 0100 	mov.w	r1, #0
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	008b      	lsls	r3, r1, #2
 8006fce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fd2:	0082      	lsls	r2, r0, #2
 8006fd4:	4650      	mov	r0, sl
 8006fd6:	4659      	mov	r1, fp
 8006fd8:	f7f9 f952 	bl	8000280 <__aeabi_uldivmod>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4b0e      	ldr	r3, [pc, #56]	; (800701c <UART_SetConfig+0x38c>)
 8006fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	2164      	movs	r1, #100	; 0x64
 8006fea:	fb01 f303 	mul.w	r3, r1, r3
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	3332      	adds	r3, #50	; 0x32
 8006ff4:	4a09      	ldr	r2, [pc, #36]	; (800701c <UART_SetConfig+0x38c>)
 8006ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4432      	add	r2, r6
 8007006:	609a      	str	r2, [r3, #8]
}
 8007008:	bf00      	nop
 800700a:	377c      	adds	r7, #124	; 0x7c
 800700c:	46bd      	mov	sp, r7
 800700e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007012:	bf00      	nop
 8007014:	40011000 	.word	0x40011000
 8007018:	40011400 	.word	0x40011400
 800701c:	51eb851f 	.word	0x51eb851f

08007020 <__errno>:
 8007020:	4b01      	ldr	r3, [pc, #4]	; (8007028 <__errno+0x8>)
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000374 	.word	0x20000374

0800702c <__libc_init_array>:
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	4d0d      	ldr	r5, [pc, #52]	; (8007064 <__libc_init_array+0x38>)
 8007030:	4c0d      	ldr	r4, [pc, #52]	; (8007068 <__libc_init_array+0x3c>)
 8007032:	1b64      	subs	r4, r4, r5
 8007034:	10a4      	asrs	r4, r4, #2
 8007036:	2600      	movs	r6, #0
 8007038:	42a6      	cmp	r6, r4
 800703a:	d109      	bne.n	8007050 <__libc_init_array+0x24>
 800703c:	4d0b      	ldr	r5, [pc, #44]	; (800706c <__libc_init_array+0x40>)
 800703e:	4c0c      	ldr	r4, [pc, #48]	; (8007070 <__libc_init_array+0x44>)
 8007040:	f000 fc82 	bl	8007948 <_init>
 8007044:	1b64      	subs	r4, r4, r5
 8007046:	10a4      	asrs	r4, r4, #2
 8007048:	2600      	movs	r6, #0
 800704a:	42a6      	cmp	r6, r4
 800704c:	d105      	bne.n	800705a <__libc_init_array+0x2e>
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	f855 3b04 	ldr.w	r3, [r5], #4
 8007054:	4798      	blx	r3
 8007056:	3601      	adds	r6, #1
 8007058:	e7ee      	b.n	8007038 <__libc_init_array+0xc>
 800705a:	f855 3b04 	ldr.w	r3, [r5], #4
 800705e:	4798      	blx	r3
 8007060:	3601      	adds	r6, #1
 8007062:	e7f2      	b.n	800704a <__libc_init_array+0x1e>
 8007064:	08008474 	.word	0x08008474
 8007068:	08008474 	.word	0x08008474
 800706c:	08008474 	.word	0x08008474
 8007070:	08008478 	.word	0x08008478

08007074 <memset>:
 8007074:	4402      	add	r2, r0
 8007076:	4603      	mov	r3, r0
 8007078:	4293      	cmp	r3, r2
 800707a:	d100      	bne.n	800707e <memset+0xa>
 800707c:	4770      	bx	lr
 800707e:	f803 1b01 	strb.w	r1, [r3], #1
 8007082:	e7f9      	b.n	8007078 <memset+0x4>

08007084 <sniprintf>:
 8007084:	b40c      	push	{r2, r3}
 8007086:	b530      	push	{r4, r5, lr}
 8007088:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <sniprintf+0x64>)
 800708a:	1e0c      	subs	r4, r1, #0
 800708c:	681d      	ldr	r5, [r3, #0]
 800708e:	b09d      	sub	sp, #116	; 0x74
 8007090:	da08      	bge.n	80070a4 <sniprintf+0x20>
 8007092:	238b      	movs	r3, #139	; 0x8b
 8007094:	602b      	str	r3, [r5, #0]
 8007096:	f04f 30ff 	mov.w	r0, #4294967295
 800709a:	b01d      	add	sp, #116	; 0x74
 800709c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070a0:	b002      	add	sp, #8
 80070a2:	4770      	bx	lr
 80070a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070ac:	bf14      	ite	ne
 80070ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070b2:	4623      	moveq	r3, r4
 80070b4:	9304      	str	r3, [sp, #16]
 80070b6:	9307      	str	r3, [sp, #28]
 80070b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070bc:	9002      	str	r0, [sp, #8]
 80070be:	9006      	str	r0, [sp, #24]
 80070c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80070c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070c6:	ab21      	add	r3, sp, #132	; 0x84
 80070c8:	a902      	add	r1, sp, #8
 80070ca:	4628      	mov	r0, r5
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	f000 f889 	bl	80071e4 <_svfiprintf_r>
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	bfbc      	itt	lt
 80070d6:	238b      	movlt	r3, #139	; 0x8b
 80070d8:	602b      	strlt	r3, [r5, #0]
 80070da:	2c00      	cmp	r4, #0
 80070dc:	d0dd      	beq.n	800709a <sniprintf+0x16>
 80070de:	9b02      	ldr	r3, [sp, #8]
 80070e0:	2200      	movs	r2, #0
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	e7d9      	b.n	800709a <sniprintf+0x16>
 80070e6:	bf00      	nop
 80070e8:	20000374 	.word	0x20000374

080070ec <siprintf>:
 80070ec:	b40e      	push	{r1, r2, r3}
 80070ee:	b500      	push	{lr}
 80070f0:	b09c      	sub	sp, #112	; 0x70
 80070f2:	ab1d      	add	r3, sp, #116	; 0x74
 80070f4:	9002      	str	r0, [sp, #8]
 80070f6:	9006      	str	r0, [sp, #24]
 80070f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070fc:	4809      	ldr	r0, [pc, #36]	; (8007124 <siprintf+0x38>)
 80070fe:	9107      	str	r1, [sp, #28]
 8007100:	9104      	str	r1, [sp, #16]
 8007102:	4909      	ldr	r1, [pc, #36]	; (8007128 <siprintf+0x3c>)
 8007104:	f853 2b04 	ldr.w	r2, [r3], #4
 8007108:	9105      	str	r1, [sp, #20]
 800710a:	6800      	ldr	r0, [r0, #0]
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	a902      	add	r1, sp, #8
 8007110:	f000 f868 	bl	80071e4 <_svfiprintf_r>
 8007114:	9b02      	ldr	r3, [sp, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	b01c      	add	sp, #112	; 0x70
 800711c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007120:	b003      	add	sp, #12
 8007122:	4770      	bx	lr
 8007124:	20000374 	.word	0x20000374
 8007128:	ffff0208 	.word	0xffff0208

0800712c <__ssputs_r>:
 800712c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007130:	688e      	ldr	r6, [r1, #8]
 8007132:	429e      	cmp	r6, r3
 8007134:	4682      	mov	sl, r0
 8007136:	460c      	mov	r4, r1
 8007138:	4690      	mov	r8, r2
 800713a:	461f      	mov	r7, r3
 800713c:	d838      	bhi.n	80071b0 <__ssputs_r+0x84>
 800713e:	898a      	ldrh	r2, [r1, #12]
 8007140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007144:	d032      	beq.n	80071ac <__ssputs_r+0x80>
 8007146:	6825      	ldr	r5, [r4, #0]
 8007148:	6909      	ldr	r1, [r1, #16]
 800714a:	eba5 0901 	sub.w	r9, r5, r1
 800714e:	6965      	ldr	r5, [r4, #20]
 8007150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007158:	3301      	adds	r3, #1
 800715a:	444b      	add	r3, r9
 800715c:	106d      	asrs	r5, r5, #1
 800715e:	429d      	cmp	r5, r3
 8007160:	bf38      	it	cc
 8007162:	461d      	movcc	r5, r3
 8007164:	0553      	lsls	r3, r2, #21
 8007166:	d531      	bpl.n	80071cc <__ssputs_r+0xa0>
 8007168:	4629      	mov	r1, r5
 800716a:	f000 fb47 	bl	80077fc <_malloc_r>
 800716e:	4606      	mov	r6, r0
 8007170:	b950      	cbnz	r0, 8007188 <__ssputs_r+0x5c>
 8007172:	230c      	movs	r3, #12
 8007174:	f8ca 3000 	str.w	r3, [sl]
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800717e:	81a3      	strh	r3, [r4, #12]
 8007180:	f04f 30ff 	mov.w	r0, #4294967295
 8007184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007188:	6921      	ldr	r1, [r4, #16]
 800718a:	464a      	mov	r2, r9
 800718c:	f000 fabe 	bl	800770c <memcpy>
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	6126      	str	r6, [r4, #16]
 800719e:	6165      	str	r5, [r4, #20]
 80071a0:	444e      	add	r6, r9
 80071a2:	eba5 0509 	sub.w	r5, r5, r9
 80071a6:	6026      	str	r6, [r4, #0]
 80071a8:	60a5      	str	r5, [r4, #8]
 80071aa:	463e      	mov	r6, r7
 80071ac:	42be      	cmp	r6, r7
 80071ae:	d900      	bls.n	80071b2 <__ssputs_r+0x86>
 80071b0:	463e      	mov	r6, r7
 80071b2:	4632      	mov	r2, r6
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	4641      	mov	r1, r8
 80071b8:	f000 fab6 	bl	8007728 <memmove>
 80071bc:	68a3      	ldr	r3, [r4, #8]
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	1b9b      	subs	r3, r3, r6
 80071c2:	4432      	add	r2, r6
 80071c4:	60a3      	str	r3, [r4, #8]
 80071c6:	6022      	str	r2, [r4, #0]
 80071c8:	2000      	movs	r0, #0
 80071ca:	e7db      	b.n	8007184 <__ssputs_r+0x58>
 80071cc:	462a      	mov	r2, r5
 80071ce:	f000 fb6f 	bl	80078b0 <_realloc_r>
 80071d2:	4606      	mov	r6, r0
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d1e1      	bne.n	800719c <__ssputs_r+0x70>
 80071d8:	6921      	ldr	r1, [r4, #16]
 80071da:	4650      	mov	r0, sl
 80071dc:	f000 fabe 	bl	800775c <_free_r>
 80071e0:	e7c7      	b.n	8007172 <__ssputs_r+0x46>
	...

080071e4 <_svfiprintf_r>:
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	4698      	mov	r8, r3
 80071ea:	898b      	ldrh	r3, [r1, #12]
 80071ec:	061b      	lsls	r3, r3, #24
 80071ee:	b09d      	sub	sp, #116	; 0x74
 80071f0:	4607      	mov	r7, r0
 80071f2:	460d      	mov	r5, r1
 80071f4:	4614      	mov	r4, r2
 80071f6:	d50e      	bpl.n	8007216 <_svfiprintf_r+0x32>
 80071f8:	690b      	ldr	r3, [r1, #16]
 80071fa:	b963      	cbnz	r3, 8007216 <_svfiprintf_r+0x32>
 80071fc:	2140      	movs	r1, #64	; 0x40
 80071fe:	f000 fafd 	bl	80077fc <_malloc_r>
 8007202:	6028      	str	r0, [r5, #0]
 8007204:	6128      	str	r0, [r5, #16]
 8007206:	b920      	cbnz	r0, 8007212 <_svfiprintf_r+0x2e>
 8007208:	230c      	movs	r3, #12
 800720a:	603b      	str	r3, [r7, #0]
 800720c:	f04f 30ff 	mov.w	r0, #4294967295
 8007210:	e0d1      	b.n	80073b6 <_svfiprintf_r+0x1d2>
 8007212:	2340      	movs	r3, #64	; 0x40
 8007214:	616b      	str	r3, [r5, #20]
 8007216:	2300      	movs	r3, #0
 8007218:	9309      	str	r3, [sp, #36]	; 0x24
 800721a:	2320      	movs	r3, #32
 800721c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007220:	f8cd 800c 	str.w	r8, [sp, #12]
 8007224:	2330      	movs	r3, #48	; 0x30
 8007226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073d0 <_svfiprintf_r+0x1ec>
 800722a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800722e:	f04f 0901 	mov.w	r9, #1
 8007232:	4623      	mov	r3, r4
 8007234:	469a      	mov	sl, r3
 8007236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800723a:	b10a      	cbz	r2, 8007240 <_svfiprintf_r+0x5c>
 800723c:	2a25      	cmp	r2, #37	; 0x25
 800723e:	d1f9      	bne.n	8007234 <_svfiprintf_r+0x50>
 8007240:	ebba 0b04 	subs.w	fp, sl, r4
 8007244:	d00b      	beq.n	800725e <_svfiprintf_r+0x7a>
 8007246:	465b      	mov	r3, fp
 8007248:	4622      	mov	r2, r4
 800724a:	4629      	mov	r1, r5
 800724c:	4638      	mov	r0, r7
 800724e:	f7ff ff6d 	bl	800712c <__ssputs_r>
 8007252:	3001      	adds	r0, #1
 8007254:	f000 80aa 	beq.w	80073ac <_svfiprintf_r+0x1c8>
 8007258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800725a:	445a      	add	r2, fp
 800725c:	9209      	str	r2, [sp, #36]	; 0x24
 800725e:	f89a 3000 	ldrb.w	r3, [sl]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 80a2 	beq.w	80073ac <_svfiprintf_r+0x1c8>
 8007268:	2300      	movs	r3, #0
 800726a:	f04f 32ff 	mov.w	r2, #4294967295
 800726e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007272:	f10a 0a01 	add.w	sl, sl, #1
 8007276:	9304      	str	r3, [sp, #16]
 8007278:	9307      	str	r3, [sp, #28]
 800727a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800727e:	931a      	str	r3, [sp, #104]	; 0x68
 8007280:	4654      	mov	r4, sl
 8007282:	2205      	movs	r2, #5
 8007284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007288:	4851      	ldr	r0, [pc, #324]	; (80073d0 <_svfiprintf_r+0x1ec>)
 800728a:	f7f8 ffa9 	bl	80001e0 <memchr>
 800728e:	9a04      	ldr	r2, [sp, #16]
 8007290:	b9d8      	cbnz	r0, 80072ca <_svfiprintf_r+0xe6>
 8007292:	06d0      	lsls	r0, r2, #27
 8007294:	bf44      	itt	mi
 8007296:	2320      	movmi	r3, #32
 8007298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800729c:	0711      	lsls	r1, r2, #28
 800729e:	bf44      	itt	mi
 80072a0:	232b      	movmi	r3, #43	; 0x2b
 80072a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a6:	f89a 3000 	ldrb.w	r3, [sl]
 80072aa:	2b2a      	cmp	r3, #42	; 0x2a
 80072ac:	d015      	beq.n	80072da <_svfiprintf_r+0xf6>
 80072ae:	9a07      	ldr	r2, [sp, #28]
 80072b0:	4654      	mov	r4, sl
 80072b2:	2000      	movs	r0, #0
 80072b4:	f04f 0c0a 	mov.w	ip, #10
 80072b8:	4621      	mov	r1, r4
 80072ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072be:	3b30      	subs	r3, #48	; 0x30
 80072c0:	2b09      	cmp	r3, #9
 80072c2:	d94e      	bls.n	8007362 <_svfiprintf_r+0x17e>
 80072c4:	b1b0      	cbz	r0, 80072f4 <_svfiprintf_r+0x110>
 80072c6:	9207      	str	r2, [sp, #28]
 80072c8:	e014      	b.n	80072f4 <_svfiprintf_r+0x110>
 80072ca:	eba0 0308 	sub.w	r3, r0, r8
 80072ce:	fa09 f303 	lsl.w	r3, r9, r3
 80072d2:	4313      	orrs	r3, r2
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	46a2      	mov	sl, r4
 80072d8:	e7d2      	b.n	8007280 <_svfiprintf_r+0x9c>
 80072da:	9b03      	ldr	r3, [sp, #12]
 80072dc:	1d19      	adds	r1, r3, #4
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	9103      	str	r1, [sp, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bfbb      	ittet	lt
 80072e6:	425b      	neglt	r3, r3
 80072e8:	f042 0202 	orrlt.w	r2, r2, #2
 80072ec:	9307      	strge	r3, [sp, #28]
 80072ee:	9307      	strlt	r3, [sp, #28]
 80072f0:	bfb8      	it	lt
 80072f2:	9204      	strlt	r2, [sp, #16]
 80072f4:	7823      	ldrb	r3, [r4, #0]
 80072f6:	2b2e      	cmp	r3, #46	; 0x2e
 80072f8:	d10c      	bne.n	8007314 <_svfiprintf_r+0x130>
 80072fa:	7863      	ldrb	r3, [r4, #1]
 80072fc:	2b2a      	cmp	r3, #42	; 0x2a
 80072fe:	d135      	bne.n	800736c <_svfiprintf_r+0x188>
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	1d1a      	adds	r2, r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	9203      	str	r2, [sp, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	bfb8      	it	lt
 800730c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007310:	3402      	adds	r4, #2
 8007312:	9305      	str	r3, [sp, #20]
 8007314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073e0 <_svfiprintf_r+0x1fc>
 8007318:	7821      	ldrb	r1, [r4, #0]
 800731a:	2203      	movs	r2, #3
 800731c:	4650      	mov	r0, sl
 800731e:	f7f8 ff5f 	bl	80001e0 <memchr>
 8007322:	b140      	cbz	r0, 8007336 <_svfiprintf_r+0x152>
 8007324:	2340      	movs	r3, #64	; 0x40
 8007326:	eba0 000a 	sub.w	r0, r0, sl
 800732a:	fa03 f000 	lsl.w	r0, r3, r0
 800732e:	9b04      	ldr	r3, [sp, #16]
 8007330:	4303      	orrs	r3, r0
 8007332:	3401      	adds	r4, #1
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733a:	4826      	ldr	r0, [pc, #152]	; (80073d4 <_svfiprintf_r+0x1f0>)
 800733c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007340:	2206      	movs	r2, #6
 8007342:	f7f8 ff4d 	bl	80001e0 <memchr>
 8007346:	2800      	cmp	r0, #0
 8007348:	d038      	beq.n	80073bc <_svfiprintf_r+0x1d8>
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <_svfiprintf_r+0x1f4>)
 800734c:	bb1b      	cbnz	r3, 8007396 <_svfiprintf_r+0x1b2>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	3307      	adds	r3, #7
 8007352:	f023 0307 	bic.w	r3, r3, #7
 8007356:	3308      	adds	r3, #8
 8007358:	9303      	str	r3, [sp, #12]
 800735a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735c:	4433      	add	r3, r6
 800735e:	9309      	str	r3, [sp, #36]	; 0x24
 8007360:	e767      	b.n	8007232 <_svfiprintf_r+0x4e>
 8007362:	fb0c 3202 	mla	r2, ip, r2, r3
 8007366:	460c      	mov	r4, r1
 8007368:	2001      	movs	r0, #1
 800736a:	e7a5      	b.n	80072b8 <_svfiprintf_r+0xd4>
 800736c:	2300      	movs	r3, #0
 800736e:	3401      	adds	r4, #1
 8007370:	9305      	str	r3, [sp, #20]
 8007372:	4619      	mov	r1, r3
 8007374:	f04f 0c0a 	mov.w	ip, #10
 8007378:	4620      	mov	r0, r4
 800737a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800737e:	3a30      	subs	r2, #48	; 0x30
 8007380:	2a09      	cmp	r2, #9
 8007382:	d903      	bls.n	800738c <_svfiprintf_r+0x1a8>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0c5      	beq.n	8007314 <_svfiprintf_r+0x130>
 8007388:	9105      	str	r1, [sp, #20]
 800738a:	e7c3      	b.n	8007314 <_svfiprintf_r+0x130>
 800738c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007390:	4604      	mov	r4, r0
 8007392:	2301      	movs	r3, #1
 8007394:	e7f0      	b.n	8007378 <_svfiprintf_r+0x194>
 8007396:	ab03      	add	r3, sp, #12
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	462a      	mov	r2, r5
 800739c:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <_svfiprintf_r+0x1f8>)
 800739e:	a904      	add	r1, sp, #16
 80073a0:	4638      	mov	r0, r7
 80073a2:	f3af 8000 	nop.w
 80073a6:	1c42      	adds	r2, r0, #1
 80073a8:	4606      	mov	r6, r0
 80073aa:	d1d6      	bne.n	800735a <_svfiprintf_r+0x176>
 80073ac:	89ab      	ldrh	r3, [r5, #12]
 80073ae:	065b      	lsls	r3, r3, #25
 80073b0:	f53f af2c 	bmi.w	800720c <_svfiprintf_r+0x28>
 80073b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073b6:	b01d      	add	sp, #116	; 0x74
 80073b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073bc:	ab03      	add	r3, sp, #12
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	462a      	mov	r2, r5
 80073c2:	4b06      	ldr	r3, [pc, #24]	; (80073dc <_svfiprintf_r+0x1f8>)
 80073c4:	a904      	add	r1, sp, #16
 80073c6:	4638      	mov	r0, r7
 80073c8:	f000 f87a 	bl	80074c0 <_printf_i>
 80073cc:	e7eb      	b.n	80073a6 <_svfiprintf_r+0x1c2>
 80073ce:	bf00      	nop
 80073d0:	08008438 	.word	0x08008438
 80073d4:	08008442 	.word	0x08008442
 80073d8:	00000000 	.word	0x00000000
 80073dc:	0800712d 	.word	0x0800712d
 80073e0:	0800843e 	.word	0x0800843e

080073e4 <_printf_common>:
 80073e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e8:	4616      	mov	r6, r2
 80073ea:	4699      	mov	r9, r3
 80073ec:	688a      	ldr	r2, [r1, #8]
 80073ee:	690b      	ldr	r3, [r1, #16]
 80073f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073f4:	4293      	cmp	r3, r2
 80073f6:	bfb8      	it	lt
 80073f8:	4613      	movlt	r3, r2
 80073fa:	6033      	str	r3, [r6, #0]
 80073fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007400:	4607      	mov	r7, r0
 8007402:	460c      	mov	r4, r1
 8007404:	b10a      	cbz	r2, 800740a <_printf_common+0x26>
 8007406:	3301      	adds	r3, #1
 8007408:	6033      	str	r3, [r6, #0]
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	0699      	lsls	r1, r3, #26
 800740e:	bf42      	ittt	mi
 8007410:	6833      	ldrmi	r3, [r6, #0]
 8007412:	3302      	addmi	r3, #2
 8007414:	6033      	strmi	r3, [r6, #0]
 8007416:	6825      	ldr	r5, [r4, #0]
 8007418:	f015 0506 	ands.w	r5, r5, #6
 800741c:	d106      	bne.n	800742c <_printf_common+0x48>
 800741e:	f104 0a19 	add.w	sl, r4, #25
 8007422:	68e3      	ldr	r3, [r4, #12]
 8007424:	6832      	ldr	r2, [r6, #0]
 8007426:	1a9b      	subs	r3, r3, r2
 8007428:	42ab      	cmp	r3, r5
 800742a:	dc26      	bgt.n	800747a <_printf_common+0x96>
 800742c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007430:	1e13      	subs	r3, r2, #0
 8007432:	6822      	ldr	r2, [r4, #0]
 8007434:	bf18      	it	ne
 8007436:	2301      	movne	r3, #1
 8007438:	0692      	lsls	r2, r2, #26
 800743a:	d42b      	bmi.n	8007494 <_printf_common+0xb0>
 800743c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007440:	4649      	mov	r1, r9
 8007442:	4638      	mov	r0, r7
 8007444:	47c0      	blx	r8
 8007446:	3001      	adds	r0, #1
 8007448:	d01e      	beq.n	8007488 <_printf_common+0xa4>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	68e5      	ldr	r5, [r4, #12]
 800744e:	6832      	ldr	r2, [r6, #0]
 8007450:	f003 0306 	and.w	r3, r3, #6
 8007454:	2b04      	cmp	r3, #4
 8007456:	bf08      	it	eq
 8007458:	1aad      	subeq	r5, r5, r2
 800745a:	68a3      	ldr	r3, [r4, #8]
 800745c:	6922      	ldr	r2, [r4, #16]
 800745e:	bf0c      	ite	eq
 8007460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007464:	2500      	movne	r5, #0
 8007466:	4293      	cmp	r3, r2
 8007468:	bfc4      	itt	gt
 800746a:	1a9b      	subgt	r3, r3, r2
 800746c:	18ed      	addgt	r5, r5, r3
 800746e:	2600      	movs	r6, #0
 8007470:	341a      	adds	r4, #26
 8007472:	42b5      	cmp	r5, r6
 8007474:	d11a      	bne.n	80074ac <_printf_common+0xc8>
 8007476:	2000      	movs	r0, #0
 8007478:	e008      	b.n	800748c <_printf_common+0xa8>
 800747a:	2301      	movs	r3, #1
 800747c:	4652      	mov	r2, sl
 800747e:	4649      	mov	r1, r9
 8007480:	4638      	mov	r0, r7
 8007482:	47c0      	blx	r8
 8007484:	3001      	adds	r0, #1
 8007486:	d103      	bne.n	8007490 <_printf_common+0xac>
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007490:	3501      	adds	r5, #1
 8007492:	e7c6      	b.n	8007422 <_printf_common+0x3e>
 8007494:	18e1      	adds	r1, r4, r3
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	2030      	movs	r0, #48	; 0x30
 800749a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800749e:	4422      	add	r2, r4
 80074a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074a8:	3302      	adds	r3, #2
 80074aa:	e7c7      	b.n	800743c <_printf_common+0x58>
 80074ac:	2301      	movs	r3, #1
 80074ae:	4622      	mov	r2, r4
 80074b0:	4649      	mov	r1, r9
 80074b2:	4638      	mov	r0, r7
 80074b4:	47c0      	blx	r8
 80074b6:	3001      	adds	r0, #1
 80074b8:	d0e6      	beq.n	8007488 <_printf_common+0xa4>
 80074ba:	3601      	adds	r6, #1
 80074bc:	e7d9      	b.n	8007472 <_printf_common+0x8e>
	...

080074c0 <_printf_i>:
 80074c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c4:	460c      	mov	r4, r1
 80074c6:	4691      	mov	r9, r2
 80074c8:	7e27      	ldrb	r7, [r4, #24]
 80074ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074cc:	2f78      	cmp	r7, #120	; 0x78
 80074ce:	4680      	mov	r8, r0
 80074d0:	469a      	mov	sl, r3
 80074d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d6:	d807      	bhi.n	80074e8 <_printf_i+0x28>
 80074d8:	2f62      	cmp	r7, #98	; 0x62
 80074da:	d80a      	bhi.n	80074f2 <_printf_i+0x32>
 80074dc:	2f00      	cmp	r7, #0
 80074de:	f000 80d8 	beq.w	8007692 <_printf_i+0x1d2>
 80074e2:	2f58      	cmp	r7, #88	; 0x58
 80074e4:	f000 80a3 	beq.w	800762e <_printf_i+0x16e>
 80074e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074f0:	e03a      	b.n	8007568 <_printf_i+0xa8>
 80074f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074f6:	2b15      	cmp	r3, #21
 80074f8:	d8f6      	bhi.n	80074e8 <_printf_i+0x28>
 80074fa:	a001      	add	r0, pc, #4	; (adr r0, 8007500 <_printf_i+0x40>)
 80074fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007500:	08007559 	.word	0x08007559
 8007504:	0800756d 	.word	0x0800756d
 8007508:	080074e9 	.word	0x080074e9
 800750c:	080074e9 	.word	0x080074e9
 8007510:	080074e9 	.word	0x080074e9
 8007514:	080074e9 	.word	0x080074e9
 8007518:	0800756d 	.word	0x0800756d
 800751c:	080074e9 	.word	0x080074e9
 8007520:	080074e9 	.word	0x080074e9
 8007524:	080074e9 	.word	0x080074e9
 8007528:	080074e9 	.word	0x080074e9
 800752c:	08007679 	.word	0x08007679
 8007530:	0800759d 	.word	0x0800759d
 8007534:	0800765b 	.word	0x0800765b
 8007538:	080074e9 	.word	0x080074e9
 800753c:	080074e9 	.word	0x080074e9
 8007540:	0800769b 	.word	0x0800769b
 8007544:	080074e9 	.word	0x080074e9
 8007548:	0800759d 	.word	0x0800759d
 800754c:	080074e9 	.word	0x080074e9
 8007550:	080074e9 	.word	0x080074e9
 8007554:	08007663 	.word	0x08007663
 8007558:	680b      	ldr	r3, [r1, #0]
 800755a:	1d1a      	adds	r2, r3, #4
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	600a      	str	r2, [r1, #0]
 8007560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007568:	2301      	movs	r3, #1
 800756a:	e0a3      	b.n	80076b4 <_printf_i+0x1f4>
 800756c:	6825      	ldr	r5, [r4, #0]
 800756e:	6808      	ldr	r0, [r1, #0]
 8007570:	062e      	lsls	r6, r5, #24
 8007572:	f100 0304 	add.w	r3, r0, #4
 8007576:	d50a      	bpl.n	800758e <_printf_i+0xce>
 8007578:	6805      	ldr	r5, [r0, #0]
 800757a:	600b      	str	r3, [r1, #0]
 800757c:	2d00      	cmp	r5, #0
 800757e:	da03      	bge.n	8007588 <_printf_i+0xc8>
 8007580:	232d      	movs	r3, #45	; 0x2d
 8007582:	426d      	negs	r5, r5
 8007584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007588:	485e      	ldr	r0, [pc, #376]	; (8007704 <_printf_i+0x244>)
 800758a:	230a      	movs	r3, #10
 800758c:	e019      	b.n	80075c2 <_printf_i+0x102>
 800758e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007592:	6805      	ldr	r5, [r0, #0]
 8007594:	600b      	str	r3, [r1, #0]
 8007596:	bf18      	it	ne
 8007598:	b22d      	sxthne	r5, r5
 800759a:	e7ef      	b.n	800757c <_printf_i+0xbc>
 800759c:	680b      	ldr	r3, [r1, #0]
 800759e:	6825      	ldr	r5, [r4, #0]
 80075a0:	1d18      	adds	r0, r3, #4
 80075a2:	6008      	str	r0, [r1, #0]
 80075a4:	0628      	lsls	r0, r5, #24
 80075a6:	d501      	bpl.n	80075ac <_printf_i+0xec>
 80075a8:	681d      	ldr	r5, [r3, #0]
 80075aa:	e002      	b.n	80075b2 <_printf_i+0xf2>
 80075ac:	0669      	lsls	r1, r5, #25
 80075ae:	d5fb      	bpl.n	80075a8 <_printf_i+0xe8>
 80075b0:	881d      	ldrh	r5, [r3, #0]
 80075b2:	4854      	ldr	r0, [pc, #336]	; (8007704 <_printf_i+0x244>)
 80075b4:	2f6f      	cmp	r7, #111	; 0x6f
 80075b6:	bf0c      	ite	eq
 80075b8:	2308      	moveq	r3, #8
 80075ba:	230a      	movne	r3, #10
 80075bc:	2100      	movs	r1, #0
 80075be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075c2:	6866      	ldr	r6, [r4, #4]
 80075c4:	60a6      	str	r6, [r4, #8]
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	bfa2      	ittt	ge
 80075ca:	6821      	ldrge	r1, [r4, #0]
 80075cc:	f021 0104 	bicge.w	r1, r1, #4
 80075d0:	6021      	strge	r1, [r4, #0]
 80075d2:	b90d      	cbnz	r5, 80075d8 <_printf_i+0x118>
 80075d4:	2e00      	cmp	r6, #0
 80075d6:	d04d      	beq.n	8007674 <_printf_i+0x1b4>
 80075d8:	4616      	mov	r6, r2
 80075da:	fbb5 f1f3 	udiv	r1, r5, r3
 80075de:	fb03 5711 	mls	r7, r3, r1, r5
 80075e2:	5dc7      	ldrb	r7, [r0, r7]
 80075e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075e8:	462f      	mov	r7, r5
 80075ea:	42bb      	cmp	r3, r7
 80075ec:	460d      	mov	r5, r1
 80075ee:	d9f4      	bls.n	80075da <_printf_i+0x11a>
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d10b      	bne.n	800760c <_printf_i+0x14c>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	07df      	lsls	r7, r3, #31
 80075f8:	d508      	bpl.n	800760c <_printf_i+0x14c>
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	6861      	ldr	r1, [r4, #4]
 80075fe:	4299      	cmp	r1, r3
 8007600:	bfde      	ittt	le
 8007602:	2330      	movle	r3, #48	; 0x30
 8007604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800760c:	1b92      	subs	r2, r2, r6
 800760e:	6122      	str	r2, [r4, #16]
 8007610:	f8cd a000 	str.w	sl, [sp]
 8007614:	464b      	mov	r3, r9
 8007616:	aa03      	add	r2, sp, #12
 8007618:	4621      	mov	r1, r4
 800761a:	4640      	mov	r0, r8
 800761c:	f7ff fee2 	bl	80073e4 <_printf_common>
 8007620:	3001      	adds	r0, #1
 8007622:	d14c      	bne.n	80076be <_printf_i+0x1fe>
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	b004      	add	sp, #16
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	4835      	ldr	r0, [pc, #212]	; (8007704 <_printf_i+0x244>)
 8007630:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	680e      	ldr	r6, [r1, #0]
 8007638:	061f      	lsls	r7, r3, #24
 800763a:	f856 5b04 	ldr.w	r5, [r6], #4
 800763e:	600e      	str	r6, [r1, #0]
 8007640:	d514      	bpl.n	800766c <_printf_i+0x1ac>
 8007642:	07d9      	lsls	r1, r3, #31
 8007644:	bf44      	itt	mi
 8007646:	f043 0320 	orrmi.w	r3, r3, #32
 800764a:	6023      	strmi	r3, [r4, #0]
 800764c:	b91d      	cbnz	r5, 8007656 <_printf_i+0x196>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	f023 0320 	bic.w	r3, r3, #32
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	2310      	movs	r3, #16
 8007658:	e7b0      	b.n	80075bc <_printf_i+0xfc>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	f043 0320 	orr.w	r3, r3, #32
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	2378      	movs	r3, #120	; 0x78
 8007664:	4828      	ldr	r0, [pc, #160]	; (8007708 <_printf_i+0x248>)
 8007666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800766a:	e7e3      	b.n	8007634 <_printf_i+0x174>
 800766c:	065e      	lsls	r6, r3, #25
 800766e:	bf48      	it	mi
 8007670:	b2ad      	uxthmi	r5, r5
 8007672:	e7e6      	b.n	8007642 <_printf_i+0x182>
 8007674:	4616      	mov	r6, r2
 8007676:	e7bb      	b.n	80075f0 <_printf_i+0x130>
 8007678:	680b      	ldr	r3, [r1, #0]
 800767a:	6826      	ldr	r6, [r4, #0]
 800767c:	6960      	ldr	r0, [r4, #20]
 800767e:	1d1d      	adds	r5, r3, #4
 8007680:	600d      	str	r5, [r1, #0]
 8007682:	0635      	lsls	r5, r6, #24
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	d501      	bpl.n	800768c <_printf_i+0x1cc>
 8007688:	6018      	str	r0, [r3, #0]
 800768a:	e002      	b.n	8007692 <_printf_i+0x1d2>
 800768c:	0671      	lsls	r1, r6, #25
 800768e:	d5fb      	bpl.n	8007688 <_printf_i+0x1c8>
 8007690:	8018      	strh	r0, [r3, #0]
 8007692:	2300      	movs	r3, #0
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	4616      	mov	r6, r2
 8007698:	e7ba      	b.n	8007610 <_printf_i+0x150>
 800769a:	680b      	ldr	r3, [r1, #0]
 800769c:	1d1a      	adds	r2, r3, #4
 800769e:	600a      	str	r2, [r1, #0]
 80076a0:	681e      	ldr	r6, [r3, #0]
 80076a2:	6862      	ldr	r2, [r4, #4]
 80076a4:	2100      	movs	r1, #0
 80076a6:	4630      	mov	r0, r6
 80076a8:	f7f8 fd9a 	bl	80001e0 <memchr>
 80076ac:	b108      	cbz	r0, 80076b2 <_printf_i+0x1f2>
 80076ae:	1b80      	subs	r0, r0, r6
 80076b0:	6060      	str	r0, [r4, #4]
 80076b2:	6863      	ldr	r3, [r4, #4]
 80076b4:	6123      	str	r3, [r4, #16]
 80076b6:	2300      	movs	r3, #0
 80076b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076bc:	e7a8      	b.n	8007610 <_printf_i+0x150>
 80076be:	6923      	ldr	r3, [r4, #16]
 80076c0:	4632      	mov	r2, r6
 80076c2:	4649      	mov	r1, r9
 80076c4:	4640      	mov	r0, r8
 80076c6:	47d0      	blx	sl
 80076c8:	3001      	adds	r0, #1
 80076ca:	d0ab      	beq.n	8007624 <_printf_i+0x164>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	079b      	lsls	r3, r3, #30
 80076d0:	d413      	bmi.n	80076fa <_printf_i+0x23a>
 80076d2:	68e0      	ldr	r0, [r4, #12]
 80076d4:	9b03      	ldr	r3, [sp, #12]
 80076d6:	4298      	cmp	r0, r3
 80076d8:	bfb8      	it	lt
 80076da:	4618      	movlt	r0, r3
 80076dc:	e7a4      	b.n	8007628 <_printf_i+0x168>
 80076de:	2301      	movs	r3, #1
 80076e0:	4632      	mov	r2, r6
 80076e2:	4649      	mov	r1, r9
 80076e4:	4640      	mov	r0, r8
 80076e6:	47d0      	blx	sl
 80076e8:	3001      	adds	r0, #1
 80076ea:	d09b      	beq.n	8007624 <_printf_i+0x164>
 80076ec:	3501      	adds	r5, #1
 80076ee:	68e3      	ldr	r3, [r4, #12]
 80076f0:	9903      	ldr	r1, [sp, #12]
 80076f2:	1a5b      	subs	r3, r3, r1
 80076f4:	42ab      	cmp	r3, r5
 80076f6:	dcf2      	bgt.n	80076de <_printf_i+0x21e>
 80076f8:	e7eb      	b.n	80076d2 <_printf_i+0x212>
 80076fa:	2500      	movs	r5, #0
 80076fc:	f104 0619 	add.w	r6, r4, #25
 8007700:	e7f5      	b.n	80076ee <_printf_i+0x22e>
 8007702:	bf00      	nop
 8007704:	08008449 	.word	0x08008449
 8007708:	0800845a 	.word	0x0800845a

0800770c <memcpy>:
 800770c:	440a      	add	r2, r1
 800770e:	4291      	cmp	r1, r2
 8007710:	f100 33ff 	add.w	r3, r0, #4294967295
 8007714:	d100      	bne.n	8007718 <memcpy+0xc>
 8007716:	4770      	bx	lr
 8007718:	b510      	push	{r4, lr}
 800771a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800771e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007722:	4291      	cmp	r1, r2
 8007724:	d1f9      	bne.n	800771a <memcpy+0xe>
 8007726:	bd10      	pop	{r4, pc}

08007728 <memmove>:
 8007728:	4288      	cmp	r0, r1
 800772a:	b510      	push	{r4, lr}
 800772c:	eb01 0402 	add.w	r4, r1, r2
 8007730:	d902      	bls.n	8007738 <memmove+0x10>
 8007732:	4284      	cmp	r4, r0
 8007734:	4623      	mov	r3, r4
 8007736:	d807      	bhi.n	8007748 <memmove+0x20>
 8007738:	1e43      	subs	r3, r0, #1
 800773a:	42a1      	cmp	r1, r4
 800773c:	d008      	beq.n	8007750 <memmove+0x28>
 800773e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007746:	e7f8      	b.n	800773a <memmove+0x12>
 8007748:	4402      	add	r2, r0
 800774a:	4601      	mov	r1, r0
 800774c:	428a      	cmp	r2, r1
 800774e:	d100      	bne.n	8007752 <memmove+0x2a>
 8007750:	bd10      	pop	{r4, pc}
 8007752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800775a:	e7f7      	b.n	800774c <memmove+0x24>

0800775c <_free_r>:
 800775c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800775e:	2900      	cmp	r1, #0
 8007760:	d048      	beq.n	80077f4 <_free_r+0x98>
 8007762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007766:	9001      	str	r0, [sp, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f1a1 0404 	sub.w	r4, r1, #4
 800776e:	bfb8      	it	lt
 8007770:	18e4      	addlt	r4, r4, r3
 8007772:	f000 f8d3 	bl	800791c <__malloc_lock>
 8007776:	4a20      	ldr	r2, [pc, #128]	; (80077f8 <_free_r+0x9c>)
 8007778:	9801      	ldr	r0, [sp, #4]
 800777a:	6813      	ldr	r3, [r2, #0]
 800777c:	4615      	mov	r5, r2
 800777e:	b933      	cbnz	r3, 800778e <_free_r+0x32>
 8007780:	6063      	str	r3, [r4, #4]
 8007782:	6014      	str	r4, [r2, #0]
 8007784:	b003      	add	sp, #12
 8007786:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800778a:	f000 b8cd 	b.w	8007928 <__malloc_unlock>
 800778e:	42a3      	cmp	r3, r4
 8007790:	d90b      	bls.n	80077aa <_free_r+0x4e>
 8007792:	6821      	ldr	r1, [r4, #0]
 8007794:	1862      	adds	r2, r4, r1
 8007796:	4293      	cmp	r3, r2
 8007798:	bf04      	itt	eq
 800779a:	681a      	ldreq	r2, [r3, #0]
 800779c:	685b      	ldreq	r3, [r3, #4]
 800779e:	6063      	str	r3, [r4, #4]
 80077a0:	bf04      	itt	eq
 80077a2:	1852      	addeq	r2, r2, r1
 80077a4:	6022      	streq	r2, [r4, #0]
 80077a6:	602c      	str	r4, [r5, #0]
 80077a8:	e7ec      	b.n	8007784 <_free_r+0x28>
 80077aa:	461a      	mov	r2, r3
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	b10b      	cbz	r3, 80077b4 <_free_r+0x58>
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d9fa      	bls.n	80077aa <_free_r+0x4e>
 80077b4:	6811      	ldr	r1, [r2, #0]
 80077b6:	1855      	adds	r5, r2, r1
 80077b8:	42a5      	cmp	r5, r4
 80077ba:	d10b      	bne.n	80077d4 <_free_r+0x78>
 80077bc:	6824      	ldr	r4, [r4, #0]
 80077be:	4421      	add	r1, r4
 80077c0:	1854      	adds	r4, r2, r1
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	6011      	str	r1, [r2, #0]
 80077c6:	d1dd      	bne.n	8007784 <_free_r+0x28>
 80077c8:	681c      	ldr	r4, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	6053      	str	r3, [r2, #4]
 80077ce:	4421      	add	r1, r4
 80077d0:	6011      	str	r1, [r2, #0]
 80077d2:	e7d7      	b.n	8007784 <_free_r+0x28>
 80077d4:	d902      	bls.n	80077dc <_free_r+0x80>
 80077d6:	230c      	movs	r3, #12
 80077d8:	6003      	str	r3, [r0, #0]
 80077da:	e7d3      	b.n	8007784 <_free_r+0x28>
 80077dc:	6825      	ldr	r5, [r4, #0]
 80077de:	1961      	adds	r1, r4, r5
 80077e0:	428b      	cmp	r3, r1
 80077e2:	bf04      	itt	eq
 80077e4:	6819      	ldreq	r1, [r3, #0]
 80077e6:	685b      	ldreq	r3, [r3, #4]
 80077e8:	6063      	str	r3, [r4, #4]
 80077ea:	bf04      	itt	eq
 80077ec:	1949      	addeq	r1, r1, r5
 80077ee:	6021      	streq	r1, [r4, #0]
 80077f0:	6054      	str	r4, [r2, #4]
 80077f2:	e7c7      	b.n	8007784 <_free_r+0x28>
 80077f4:	b003      	add	sp, #12
 80077f6:	bd30      	pop	{r4, r5, pc}
 80077f8:	200008d8 	.word	0x200008d8

080077fc <_malloc_r>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	1ccd      	adds	r5, r1, #3
 8007800:	f025 0503 	bic.w	r5, r5, #3
 8007804:	3508      	adds	r5, #8
 8007806:	2d0c      	cmp	r5, #12
 8007808:	bf38      	it	cc
 800780a:	250c      	movcc	r5, #12
 800780c:	2d00      	cmp	r5, #0
 800780e:	4606      	mov	r6, r0
 8007810:	db01      	blt.n	8007816 <_malloc_r+0x1a>
 8007812:	42a9      	cmp	r1, r5
 8007814:	d903      	bls.n	800781e <_malloc_r+0x22>
 8007816:	230c      	movs	r3, #12
 8007818:	6033      	str	r3, [r6, #0]
 800781a:	2000      	movs	r0, #0
 800781c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800781e:	f000 f87d 	bl	800791c <__malloc_lock>
 8007822:	4921      	ldr	r1, [pc, #132]	; (80078a8 <_malloc_r+0xac>)
 8007824:	680a      	ldr	r2, [r1, #0]
 8007826:	4614      	mov	r4, r2
 8007828:	b99c      	cbnz	r4, 8007852 <_malloc_r+0x56>
 800782a:	4f20      	ldr	r7, [pc, #128]	; (80078ac <_malloc_r+0xb0>)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	b923      	cbnz	r3, 800783a <_malloc_r+0x3e>
 8007830:	4621      	mov	r1, r4
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f862 	bl	80078fc <_sbrk_r>
 8007838:	6038      	str	r0, [r7, #0]
 800783a:	4629      	mov	r1, r5
 800783c:	4630      	mov	r0, r6
 800783e:	f000 f85d 	bl	80078fc <_sbrk_r>
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	d123      	bne.n	800788e <_malloc_r+0x92>
 8007846:	230c      	movs	r3, #12
 8007848:	6033      	str	r3, [r6, #0]
 800784a:	4630      	mov	r0, r6
 800784c:	f000 f86c 	bl	8007928 <__malloc_unlock>
 8007850:	e7e3      	b.n	800781a <_malloc_r+0x1e>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	1b5b      	subs	r3, r3, r5
 8007856:	d417      	bmi.n	8007888 <_malloc_r+0x8c>
 8007858:	2b0b      	cmp	r3, #11
 800785a:	d903      	bls.n	8007864 <_malloc_r+0x68>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	441c      	add	r4, r3
 8007860:	6025      	str	r5, [r4, #0]
 8007862:	e004      	b.n	800786e <_malloc_r+0x72>
 8007864:	6863      	ldr	r3, [r4, #4]
 8007866:	42a2      	cmp	r2, r4
 8007868:	bf0c      	ite	eq
 800786a:	600b      	streq	r3, [r1, #0]
 800786c:	6053      	strne	r3, [r2, #4]
 800786e:	4630      	mov	r0, r6
 8007870:	f000 f85a 	bl	8007928 <__malloc_unlock>
 8007874:	f104 000b 	add.w	r0, r4, #11
 8007878:	1d23      	adds	r3, r4, #4
 800787a:	f020 0007 	bic.w	r0, r0, #7
 800787e:	1ac2      	subs	r2, r0, r3
 8007880:	d0cc      	beq.n	800781c <_malloc_r+0x20>
 8007882:	1a1b      	subs	r3, r3, r0
 8007884:	50a3      	str	r3, [r4, r2]
 8007886:	e7c9      	b.n	800781c <_malloc_r+0x20>
 8007888:	4622      	mov	r2, r4
 800788a:	6864      	ldr	r4, [r4, #4]
 800788c:	e7cc      	b.n	8007828 <_malloc_r+0x2c>
 800788e:	1cc4      	adds	r4, r0, #3
 8007890:	f024 0403 	bic.w	r4, r4, #3
 8007894:	42a0      	cmp	r0, r4
 8007896:	d0e3      	beq.n	8007860 <_malloc_r+0x64>
 8007898:	1a21      	subs	r1, r4, r0
 800789a:	4630      	mov	r0, r6
 800789c:	f000 f82e 	bl	80078fc <_sbrk_r>
 80078a0:	3001      	adds	r0, #1
 80078a2:	d1dd      	bne.n	8007860 <_malloc_r+0x64>
 80078a4:	e7cf      	b.n	8007846 <_malloc_r+0x4a>
 80078a6:	bf00      	nop
 80078a8:	200008d8 	.word	0x200008d8
 80078ac:	200008dc 	.word	0x200008dc

080078b0 <_realloc_r>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	4607      	mov	r7, r0
 80078b4:	4614      	mov	r4, r2
 80078b6:	460e      	mov	r6, r1
 80078b8:	b921      	cbnz	r1, 80078c4 <_realloc_r+0x14>
 80078ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078be:	4611      	mov	r1, r2
 80078c0:	f7ff bf9c 	b.w	80077fc <_malloc_r>
 80078c4:	b922      	cbnz	r2, 80078d0 <_realloc_r+0x20>
 80078c6:	f7ff ff49 	bl	800775c <_free_r>
 80078ca:	4625      	mov	r5, r4
 80078cc:	4628      	mov	r0, r5
 80078ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d0:	f000 f830 	bl	8007934 <_malloc_usable_size_r>
 80078d4:	42a0      	cmp	r0, r4
 80078d6:	d20f      	bcs.n	80078f8 <_realloc_r+0x48>
 80078d8:	4621      	mov	r1, r4
 80078da:	4638      	mov	r0, r7
 80078dc:	f7ff ff8e 	bl	80077fc <_malloc_r>
 80078e0:	4605      	mov	r5, r0
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d0f2      	beq.n	80078cc <_realloc_r+0x1c>
 80078e6:	4631      	mov	r1, r6
 80078e8:	4622      	mov	r2, r4
 80078ea:	f7ff ff0f 	bl	800770c <memcpy>
 80078ee:	4631      	mov	r1, r6
 80078f0:	4638      	mov	r0, r7
 80078f2:	f7ff ff33 	bl	800775c <_free_r>
 80078f6:	e7e9      	b.n	80078cc <_realloc_r+0x1c>
 80078f8:	4635      	mov	r5, r6
 80078fa:	e7e7      	b.n	80078cc <_realloc_r+0x1c>

080078fc <_sbrk_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4d06      	ldr	r5, [pc, #24]	; (8007918 <_sbrk_r+0x1c>)
 8007900:	2300      	movs	r3, #0
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f7fa f868 	bl	80019dc <_sbrk>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_sbrk_r+0x1a>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_sbrk_r+0x1a>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	20000b30 	.word	0x20000b30

0800791c <__malloc_lock>:
 800791c:	4801      	ldr	r0, [pc, #4]	; (8007924 <__malloc_lock+0x8>)
 800791e:	f000 b811 	b.w	8007944 <__retarget_lock_acquire_recursive>
 8007922:	bf00      	nop
 8007924:	20000b38 	.word	0x20000b38

08007928 <__malloc_unlock>:
 8007928:	4801      	ldr	r0, [pc, #4]	; (8007930 <__malloc_unlock+0x8>)
 800792a:	f000 b80c 	b.w	8007946 <__retarget_lock_release_recursive>
 800792e:	bf00      	nop
 8007930:	20000b38 	.word	0x20000b38

08007934 <_malloc_usable_size_r>:
 8007934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007938:	1f18      	subs	r0, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	bfbc      	itt	lt
 800793e:	580b      	ldrlt	r3, [r1, r0]
 8007940:	18c0      	addlt	r0, r0, r3
 8007942:	4770      	bx	lr

08007944 <__retarget_lock_acquire_recursive>:
 8007944:	4770      	bx	lr

08007946 <__retarget_lock_release_recursive>:
 8007946:	4770      	bx	lr

08007948 <_init>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	bf00      	nop
 800794c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794e:	bc08      	pop	{r3}
 8007950:	469e      	mov	lr, r3
 8007952:	4770      	bx	lr

08007954 <_fini>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	bf00      	nop
 8007958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795a:	bc08      	pop	{r3}
 800795c:	469e      	mov	lr, r3
 800795e:	4770      	bx	lr
